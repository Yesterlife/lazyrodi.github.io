<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lazy Rodriguez</title>
    <link>http://lazyrodi.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 23 Jul 2016 14:19:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SVG (Scalable Vector Graphic)</title>
      <link>http://lazyrodi.github.io/2016/07/23/2016-07-23-etc-tutorial/</link>
      <guid>http://lazyrodi.github.io/2016/07/23/2016-07-23-etc-tutorial/</guid>
      <pubDate>Sat, 23 Jul 2016 12:02:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;Jekyll이나 Hexo를 이용할 때 SVG 포맷을 처음 보게 되어서 한 번 찾아보았다.&lt;/p&gt;
&lt;p&gt;SVG는 Scalable Vector Graphic 의 약자로 XML을 통해 Vector Image(단순하게 말해서 확대해도 깨지지 않는 이미지
      
      </description>
      
      <content:encoded>&lt;p&gt;Jekyll이나 Hexo를 이용할 때 SVG 포맷을 처음 보게 되어서 한 번 찾아보았다.&lt;/p&gt;
&lt;p&gt;SVG는 Scalable Vector Graphic 의 약자로 XML을 통해 Vector Image(단순하게 말해서 확대해도 깨지지 않는 이미지)를 표현할 수 있게 정의된 포맷이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/SVG/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C에서 SVG를 정의&lt;/a&gt;하고 있고 &lt;a href=&quot;http://www.w3schools.com/svg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;도 잘 정리해 두었다.&lt;/p&gt;
&lt;p&gt;사용법은 굉장히 단순하게 보이지만 파고들면 역시나 쉽지 않다. (물론 시간만 있다면 &lt;a href=&quot;http://www.w3schools.com/svg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;만 보고도 뭐든 그릴 수 있을 것 같긴 하다.)&lt;/p&gt;
&lt;p&gt;뭘 그려볼까 하다가 LG의 CI를 그려보았다.&lt;/p&gt;
&lt;p&gt;구성요소는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배경이 되는 빨간 &lt;code&gt;circle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;G의 기본이 되는 하얀 &lt;code&gt;circle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;우 상단 1/4 영역의 하얀 색을 지우기 위한 mask역할의 &lt;code&gt;path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;G의 가로줄 &lt;code&gt;line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;코 역할의 L을 그려줄 &lt;code&gt;polyline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래의 소스를 ~~~.svg 로 저장하고 html에서 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag를 통해 사용할 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:xlink&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/1999/xlink&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;80&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;80&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- background circle --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cy&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;r&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fill&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#C3013B&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- inner circle --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cy&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;r&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;32&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fill:none;stroke:#FFFFFF;stroke-width:3&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- masking --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;M40,8 A32,32 0 0,1 72,39&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stroke:#C3013B;stroke-width:4;fill:none&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x1&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y1&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x2&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;73.5&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y2&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stroke:#FFFFFF;stroke-width:3&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- eye --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;25&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cy&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;27&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;r&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fill&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#FFFFFF&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- L --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;polyline&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;points&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40,22 40,58 50,58&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fill:none;stroke:#FFFFFF;stroke-width:3&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;그림의 결과는 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/LG_CI.svg&quot; alt=&quot;LG_CI.svg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;참조&quot;&gt;&lt;a href=&quot;#참조&quot; class=&quot;headerlink&quot; title=&quot;참조&quot;&gt;&lt;/a&gt;참조&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/SVG/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVG Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/svg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVG Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tutorials.jenkov.com/svg/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tutorials.jenkov.com/svg/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/scale-svg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://css-tricks.com/scale-svg/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/23/2016-07-23-etc-tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android Interview</title>
      <link>http://lazyrodi.github.io/2016/07/19/2016-07-19-interview-android/</link>
      <guid>http://lazyrodi.github.io/2016/07/19/2016-07-19-interview-android/</guid>
      <pubDate>Tue, 19 Jul 2016 10:00:00 GMT</pubDate>
      <description>
      
        &lt;ol&gt;
&lt;li&gt;Android application을 생성할 때 중요한 폴더 및 파일을 설명하라.&lt;/li&gt;
&lt;li&gt;다음 AndroidManifest.xml 파일을 설명하라.&lt;/li&gt;
&lt;li&gt;Activity에 대해 간단히 설명하라.&lt;/li&gt;
&lt;li&gt;An
      
      </description>
      
      <content:encoded>&lt;ol&gt;
&lt;li&gt;Android application을 생성할 때 중요한 폴더 및 파일을 설명하라.&lt;/li&gt;
&lt;li&gt;다음 AndroidManifest.xml 파일을 설명하라.&lt;/li&gt;
&lt;li&gt;Activity에 대해 간단히 설명하라.&lt;/li&gt;
&lt;li&gt;Android Architecture의 key component는 무엇인가?&lt;/li&gt;
&lt;li&gt;Intent에 대해 설명하라.&lt;/li&gt;
&lt;li&gt;Android에서 SMS를 발신하기 위해서는 어떻게 해야 하는지 설명하라.&lt;/li&gt;
&lt;li&gt;SMSManager class에 대해 설명하라.&lt;/li&gt;
&lt;li&gt;당신의 application에서 어떻게 Messaging application을 사용할 수 있겠는가?&lt;/li&gt;
&lt;li&gt;Android에서 사용할 수 있는 Data storage에는 어떤 것들이 있는가?&lt;/li&gt;
&lt;li&gt;SharedPreference에 대해 예시와 함께 설명하라.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Android-application을-생성할-때-중요한-폴더-및-파일을-설명하라&quot;&gt;&lt;a href=&quot;#Android-application을-생성할-때-중요한-폴더-및-파일을-설명하라&quot; class=&quot;headerlink&quot; title=&quot;Android application을 생성할 때 중요한 폴더 및 파일을 설명하라.&quot;&gt;&lt;/a&gt;Android application을 생성할 때 중요한 폴더 및 파일을 설명하라.&lt;/h2&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;src&lt;/td&gt;&lt;td&gt;.java파일을 포함한다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gen&lt;/td&gt;&lt;td&gt;Compiler가 자동으로 생성하는 Resource파일인 R.java 파일을 가지고 있다. 이 파일은 수정해서는 아니된다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;library&lt;/td&gt;&lt;td&gt;android.jar 파일을 포함한다. 해당 Android application에 대한 library들이다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;assets&lt;/td&gt;&lt;td&gt;HTML, text, database등의 파일을 포함한다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;bin&lt;/td&gt;&lt;td&gt;빌드 후 생성되는 .apk 파일을 포함한다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;res&lt;/td&gt;&lt;td&gt;Application에서 사용하는 리소스 파일들을 포함한다.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;hr&gt;
&lt;h2 id=&quot;다음-AndroidManifest-xml-파일을-설명하라&quot;&gt;&lt;a href=&quot;#다음-AndroidManifest-xml-파일을-설명하라&quot; class=&quot;headerlink&quot; title=&quot;다음 AndroidManifest.xml 파일을 설명하라.&quot;&gt;&lt;/a&gt;다음 AndroidManifest.xml 파일을 설명하라.&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Package 이름(@string/app_name)을 포함한다.&lt;/li&gt;
&lt;li&gt;Version code가 1이고 이는 어플리케이션의 version(몇 번째 release인지)을 나타낸다.&lt;/li&gt;
&lt;li&gt;Version name이 1.0임을 알 수 있다.&lt;/li&gt;
&lt;li&gt;android.minSdkVersion이 8이고 이는 이 어플리케이션이 실행될 수 있는 Android OS의 최소 version을 나타낸다.&lt;/li&gt;
&lt;li&gt;MainActivity에 대한 activity 정보를 확인할 수 있다. Intent-filter를 통해 Main임을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.example.careerride&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;uses-sdk android:minSdkVersion=&quot;8&quot; android:targetSdkVersion=&quot;18&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@drawable/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:theme=&quot;@style/AppTheme&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;activity android:name=&quot;com.example.careerride.MainActivity&quot; android:label=&quot;@string/app_name&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/application&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Activity에-대해-간단히-설명하라&quot;&gt;&lt;a href=&quot;#Activity에-대해-간단히-설명하라&quot; class=&quot;headerlink&quot; title=&quot;Activity에 대해 간단히 설명하라.&quot;&gt;&lt;/a&gt;Activity에 대해 간단히 설명하라.&lt;/h2&gt;&lt;p&gt;Activity는 User interface를 보여준다. Android application 생성 시 하나의 activity가 생성되며, 기본 이름은 MainActivity이며 맘대로 이름을 붙일 수 있다.&lt;/p&gt;
&lt;p&gt;기본적으로 Activity class를 상속받는다.&lt;/p&gt;
&lt;p&gt;Android Application은 0개 이상의 Activity를 가질 수 있으며 사용자와의 interaction을 위해 사용한다.&lt;/p&gt;
&lt;p&gt;Activity는 onCreate()로 시작하여 onDestroy()로 끝나는 Lifecycle을 가지고 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;packagecom.example.careerride; &lt;span class=&quot;comment&quot;&gt;//Application name careerride&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;importandroid.os.Bundle; &lt;span class=&quot;comment&quot;&gt;// Default packages&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;importandroid.app.Activity; &lt;span class=&quot;comment&quot;&gt;// Default packages&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;importandroid.view.Menu;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;publicbooleanonCreateOptionsMenu(Menu menu) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Inflate the menu; this adds items to the action bar if it is present.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getMenuInflater().inflate(R.menu.main, menu);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Android-Architecture의-key-component는-무엇인가&quot;&gt;&lt;a href=&quot;#Android-Architecture의-key-component는-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;Android Architecture의 key component는 무엇인가?&quot;&gt;&lt;/a&gt;Android Architecture의 key component는 무엇인가?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Linux Kernel&lt;/li&gt;
&lt;li&gt;Libraries&lt;/li&gt;
&lt;li&gt;Android Framework&lt;/li&gt;
&lt;li&gt;Android Applications&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Intent에-대해-설명하라&quot;&gt;&lt;a href=&quot;#Intent에-대해-설명하라&quot; class=&quot;headerlink&quot; title=&quot;Intent에 대해 설명하라.&quot;&gt;&lt;/a&gt;Intent에 대해 설명하라.&lt;/h2&gt;&lt;p&gt;Android의 기본 구성요소(Component)에는 Acivity, Service, ContentProvider, BroadcastReceiver 네 가지가 있는데 이 중 Activity, Service, BroadcastReceiver 사이에 data를 주고 받기 위해 intent를 사용한다.&lt;/p&gt;
&lt;p&gt;다른 activity를 호출하거나 service를 시작하거나 broadcast할 수 있다.&lt;/p&gt;
&lt;p&gt;Intent는 명시적 intent와 암시적 intent 두 가지로 나눌 수 있다.&lt;/p&gt;
&lt;p&gt;명시적 intent는 intent를 전달할 class 정보를 포함한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Intent intent = newIntent (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, SecondActivity.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;startActivity(intent);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;암시적 intent는 동작을 원하는 값을 action값으로 하여 URI, MIME type, category 등과 함께 던지면 Android system에서 적절한 application을 찾아서 원하는 동작을 시켜준다.&lt;/p&gt;
&lt;p&gt;적절한 application을 찾는 과정에서 다른 application 내의 intent-filter를 검색하여 매칭되는지 확인한다.&lt;/p&gt;
&lt;p&gt;암시적 intent를 던질 때 call, sms 등과 같은 특정한 동작을 원할 때에는 자신이 그 동작을 수행할 수 있는 permission을 가지고 있어야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Intent i = newIntent(android.content.Intent.ACTION_VIEW,Uri.parse(“http:&lt;span class=&quot;comment&quot;&gt;//www.amazon.com”));&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;startActivity(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Intent i = newIntent (android.content.Intent.ACTION_DIAL,Uri.parse(“tel:+9923.....”));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;startActivity(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/**/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Intent i = newIntent (android.content.Intent.ACTION_CALL,Uri.parse(“tel:+&lt;span class=&quot;number&quot;&gt;9923&lt;/span&gt;.....”));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;startActivity(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* permission */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;uses-permissionandroid:name=”android.permission.CALL_PHONE”/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;uses-permissionandroid:name=”android.permission.INTERNET”/&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Android에서-SMS를-발신하기-위해서는-어떻게-해야-하는지-설명하라&quot;&gt;&lt;a href=&quot;#Android에서-SMS를-발신하기-위해서는-어떻게-해야-하는지-설명하라&quot; class=&quot;headerlink&quot; title=&quot;Android에서 SMS를 발신하기 위해서는 어떻게 해야 하는지 설명하라.&quot;&gt;&lt;/a&gt;Android에서 SMS를 발신하기 위해서는 어떻게 해야 하는지 설명하라.&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;“send sms” Button을 생성한다.&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml 에 permisson을 설정한다.&lt;ul&gt;
&lt;li&gt;&lt;uses-permissionandroid:name=&quot;android.permission.send_sms&quot;&gt;&lt;/uses-permissionandroid:name=&quot;android.permission.send_sms&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다음과 같은 메소드를 만들어서 SMS를 발신한다.&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;publicvoidsendmySMS(View v)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     SmsManager sms = SmsManager.getDefault();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     sms.sendTextMessage(&lt;span class=&quot;string&quot;&gt;&quot;5556&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Hello from careerRide&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;SMSManager-class에-대해-설명하라&quot;&gt;&lt;a href=&quot;#SMSManager-class에-대해-설명하라&quot; class=&quot;headerlink&quot; title=&quot;SMSManager class에 대해 설명하라.&quot;&gt;&lt;/a&gt;SMSManager class에 대해 설명하라.&lt;/h2&gt;&lt;p&gt;SMS를 발신할 때 사용하는 class이며, 직접적으로 초기화하여 사용할 수 없고 getDefault()를 사용해야 한다.&lt;/p&gt;
&lt;p&gt;발신하는 메소드는 sendTextMessage()인데 다음과 같은 파라미터들을 갖는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;destinationAddress: 수신자의 전화번호&lt;/li&gt;
&lt;li&gt;scAddress: Service center address (null로 설정해도 된다.)&lt;/li&gt;
&lt;li&gt;text: 메시지 내용&lt;/li&gt;
&lt;li&gt;sentIntent: 메시지가 발신되었음을 알려주는 intent.&lt;/li&gt;
&lt;li&gt;deliveryIntent: 메시지가 상대방에게 도착하였음을 알려주는 intent. 어플리케이션에서 delivery status option을 체크해줘야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;publicvoidsendmySMS(View v)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     SmsManager sms = SmsManager.getDefault();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     sms.sendTextMessage(&lt;span class=&quot;string&quot;&gt;&quot;5556&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Hello from careerRide&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;당신의-application에서-어떻게-Messaging-application을-사용할-수-있겠는가&quot;&gt;&lt;a href=&quot;#당신의-application에서-어떻게-Messaging-application을-사용할-수-있겠는가&quot; class=&quot;headerlink&quot; title=&quot;당신의 application에서 어떻게 Messaging application을 사용할 수 있겠는가?&quot;&gt;&lt;/a&gt;당신의 application에서 어떻게 Messaging application을 사용할 수 있겠는가?&lt;/h2&gt;&lt;p&gt;SMS 발신 permission을 얻은 후, Intent를 던지면 Default SMS Application으로 설정되어 있는 Application을 통해 SMS를 발신할 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent (android.content.Intent.ACTION_VIEW);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;intent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;5556; 5558;&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// Send the message to multiple recipient.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;itent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;sms_body&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Hello my friends!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;intent.setType(&lt;span class=&quot;string&quot;&gt;&quot;vnd.android-dir/mms-sms&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;startActivity(intent);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Android에서-사용할-수-있는-Data-storage에는-어떤-것들이-있는가&quot;&gt;&lt;a href=&quot;#Android에서-사용할-수-있는-Data-storage에는-어떤-것들이-있는가&quot; class=&quot;headerlink&quot; title=&quot;Android에서 사용할 수 있는 Data storage에는 어떤 것들이 있는가?&quot;&gt;&lt;/a&gt;Android에서 사용할 수 있는 Data storage에는 어떤 것들이 있는가?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SharedPreferences&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;ContentProvider&lt;/li&gt;
&lt;li&gt;File Storage&lt;/li&gt;
&lt;li&gt;Cloud Storage&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;SharedPreference에-대해-예시와-함께-설명하라&quot;&gt;&lt;a href=&quot;#SharedPreference에-대해-예시와-함께-설명하라&quot; class=&quot;headerlink&quot; title=&quot;SharedPreference에 대해 예시와 함께 설명하라.&quot;&gt;&lt;/a&gt;SharedPreference에 대해 예시와 함께 설명하라.&lt;/h2&gt;&lt;p&gt;SharedPreference는 Android storage 중 가장 간단한 방법을 가진다.&lt;/p&gt;
&lt;p&gt;Data를 XML 파일에 저장하는데 Key-Value pair로 한다. Primitive data type을 사용할 수 있다. (boolean, float, int, long, string)&lt;/p&gt;
&lt;p&gt;XML 파일은 data/data/자신의 패키지명(com.a.b)/shared-prefs/ 디렉토리에 저장된다.&lt;/p&gt;
&lt;p&gt;A Activity에서 저장한 내용도 B Activity에서 가져다가 사용할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;저장&quot;&gt;&lt;a href=&quot;#저장&quot; class=&quot;headerlink&quot; title=&quot;저장&quot;&gt;&lt;/a&gt;저장&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;SharedPreferences sf = getSharedPreferences(&lt;span class=&quot;string&quot;&gt;&quot;MyData&quot;&lt;/span&gt;, MODE_PRIVATE); &lt;span class=&quot;comment&quot;&gt;// &quot;Mydata&quot; XML file, MODE_PRIVATE은 이 어플리케이션에서만 사용하겠다는 의미.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SharedPreferences.Editor ed = sf.edit();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ed.putString(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, txtusername.getText().toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ed.putString(&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, txtpassword.getText().toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ed.commit();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;읽어오기&quot;&gt;&lt;a href=&quot;#읽어오기&quot; class=&quot;headerlink&quot; title=&quot;읽어오기&quot;&gt;&lt;/a&gt;읽어오기&lt;/h3&gt;&lt;p&gt;getString(value, default) 형식으로 읽어오면 되며, value가 SharedPreference에 존재하지 않을 때 “default” 값을 가져온다.&lt;/p&gt;
&lt;p&gt;그리고 아래 코드에서는 name이나 pass 중 하나라도 못 읽어오면 “No data is found” Toast를 발생시킨다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String DEFAULT = &lt;span class=&quot;string&quot;&gt;&quot;N/A&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SharedPreferences sf = getSharedPreferences(&lt;span class=&quot;string&quot;&gt;&quot;MyData&quot;&lt;/span&gt;, Context.MODE_PRIVATE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String Uname = sf.getString(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, DEFAULT);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String UPass = sf.getString(&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;, DEFAULT);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(name.equals(DEFAULT) || Pass.equals(DEFAULT)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Toast.makeText(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;No data is found&quot;&lt;/span&gt;, Toast.LENGTH_LONG).show();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Txtusername.setText(Uname);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Txtpassword.setText(UPass) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.careerride.com/android-interview-questions.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.careerride.com/android-interview-questions.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/19/2016-07-19-interview-android/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Intent</title>
      <link>http://lazyrodi.github.io/2016/07/17/2016-07-17-android-intent/</link>
      <guid>http://lazyrodi.github.io/2016/07/17/2016-07-17-android-intent/</guid>
      <pubDate>Sat, 16 Jul 2016 23:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Android의 기본 Application component에는 다음 네 가지가 있다.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;Components&lt;/th&gt;&lt;th&gt;&lt;center&gt;Description&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Acti
      
      </description>
      
      <content:encoded>&lt;p&gt;Android의 기본 Application component에는 다음 네 가지가 있다.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;Components&lt;/th&gt;&lt;th&gt;&lt;center&gt;Description&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Activity&lt;/td&gt;&lt;td&gt;사용자 인터페이스가 있는 화면 하나를 뜻한다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Service&lt;/td&gt;&lt;td&gt;Background에서 실행되는 component이다.&lt;br&gt;오랫동안 실행되는 작업이나 원격 프로세스를 위한 작업이 주로 이루어지며 사용자 인터페이스를 제공하지 않는다.&lt;br&gt;(ex. 음악 재생, 파일 다운로드)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Content Provider&lt;/td&gt;&lt;td&gt;File system, Database 등의 저장소를 통합 관리한다.&lt;br&gt;권한이 허가된 경우 다른 application에서 접근 및 수정까지도 가능하다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Broadcast Reciever&lt;/td&gt;&lt;td&gt;System이나 application은 특정한 상태나 data에 대해 broadcast를 날릴 수 있는데 이를 수신하여 처리한다.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;위 기본 요소 중 &lt;code&gt;Activity&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, &lt;code&gt;Broadcast Reciever&lt;/code&gt;는 &lt;code&gt;Intent&lt;/code&gt; 라는 비동기 메시지가 전달되어 활성화된다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Intent&quot;&gt;&lt;a href=&quot;#Intent&quot; class=&quot;headerlink&quot; title=&quot;Intent&quot;&gt;&lt;/a&gt;Intent&lt;/h2&gt;&lt;p&gt;Message Object의 일종으로 intent를 사용하여 다른 component들에게 작업을 요청할 수 있다.&lt;/p&gt;
&lt;p&gt;기본적으로는 다음 세 가지 목적으로 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity의 시작&lt;/li&gt;
&lt;li&gt;Service의 시작&lt;/li&gt;
&lt;li&gt;Broadcast의 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Activity의-시작&quot;&gt;&lt;a href=&quot;#Activity의-시작&quot; class=&quot;headerlink&quot; title=&quot;Activity의 시작&quot;&gt;&lt;/a&gt;Activity의 시작&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Intent를 &lt;code&gt;startActivity()&lt;/code&gt;로 전달하면 새 activity가 실행된다.&lt;/li&gt;
&lt;li&gt;Activity의 실행 결과를 돌려받고 싶다면 &lt;code&gt;startActivityForResult()&lt;/code&gt;를 호출한다.&lt;ul&gt;
&lt;li&gt;돌려받은 결과는 &lt;code&gt;onActivityResult()&lt;/code&gt;를 구현하여 처리할 수 있다. 결과 또한 intent로 수신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Service의-시작&quot;&gt;&lt;a href=&quot;#Service의-시작&quot; class=&quot;headerlink&quot; title=&quot;Service의 시작&quot;&gt;&lt;/a&gt;Service의 시작&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Intent를 &lt;code&gt;startService()&lt;/code&gt;로 전달하면 일회성 작업이 수행된다.&lt;/li&gt;
&lt;li&gt;Client-Server interface로 설계된 service라면 &lt;code&gt;intent&lt;/code&gt;를 &lt;code&gt;bindService()&lt;/code&gt;로 전달하면 바인딩하여 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Broadcast의-전달&quot;&gt;&lt;a href=&quot;#Broadcast의-전달&quot; class=&quot;headerlink&quot; title=&quot;Broadcast의 전달&quot;&gt;&lt;/a&gt;Broadcast의 전달&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Intent를 &lt;code&gt;sendBroadcast()&lt;/code&gt;, &lt;code&gt;sendOrderedBroadcast()&lt;/code&gt;, &lt;code&gt;sendStickyBroadcast()&lt;/code&gt; 중 하나에 담아서 전달한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;모든 application&lt;/code&gt;들에 &lt;code&gt;message를 전달&lt;/code&gt;할 때 사용한다. (system에서 전달할 때는 특정 application을 지정해서 전달할 수도 있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Intent의-기본-요소&quot;&gt;&lt;a href=&quot;#Intent의-기본-요소&quot; class=&quot;headerlink&quot; title=&quot;Intent의 기본 요소&quot;&gt;&lt;/a&gt;Intent의 기본 요소&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ComponentName&lt;/code&gt;, &lt;code&gt;Action&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, &lt;code&gt;Category&lt;/code&gt;, &lt;code&gt;Extra&lt;/code&gt;, &lt;code&gt;Flags&lt;/code&gt; 가 있다.&lt;/p&gt;
&lt;h3 id=&quot;ComponentName&quot;&gt;&lt;a href=&quot;#ComponentName&quot; class=&quot;headerlink&quot; title=&quot;ComponentName&quot;&gt;&lt;/a&gt;ComponentName&lt;/h3&gt;&lt;p&gt;Optional 항목으로 Implicit intent로 사용할 경우 반드시 이름을 명시해야 한다.&lt;/p&gt;
&lt;p&gt;Service를 시작하는 경우에는 무조건 이 항목을 지정해야 한다. 그렇지 않으면 해당 intent에 어느 service가 응답할지 확신할 수 없고 사용자고 어떤 service가 시작되는지 알 수 없게 된다.&lt;/p&gt;
&lt;p&gt;ComponentName으로는 application의 패키지명이 포함된 Full-Qualified class name을 사용해야 한다. (ex. com.example.Example.Activity).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Intent 생성자&lt;/code&gt;를 사용하거나 &lt;code&gt;setComponent()&lt;/code&gt;, &lt;code&gt;setClass()&lt;/code&gt;, &lt;code&gt;setClassName()&lt;/code&gt;을 사용하여 &lt;code&gt;ComponentName을 설정&lt;/code&gt;할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h3&gt;&lt;p&gt;수행할 작업을 나타내며, 특정 application에서 커스터마이징한 action name을 사용할 수도 있지만 일반적으로는 Intent class나 다른 Framework class가 정의한 &lt;code&gt;Action 상수&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;p&gt;커스터마이징할 경우 패키지명을 Prefix(접두사)에 포함시켜야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String ACTION_TIMETRAVEL = &lt;span class=&quot;string&quot;&gt;&quot;com.example.action.TIMETRAVEL&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Activity를 시작할 때 아래 두 가지 &lt;code&gt;ACTION&lt;/code&gt;을 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACTION_VIEW&lt;ul&gt;
&lt;li&gt;&lt;code&gt;startActivity()&lt;/code&gt;를 사용하며, 해당 Activity가 사용자에게 표시할 정보를 가지고 있을 때(ex. 갤러리) 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ACTION_SEND&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shared intent&lt;/code&gt;라고도 하며, &lt;code&gt;startActivity()&lt;/code&gt;를 사용한다. 사용자가 다른 application을 통해 공유할 수 있는 data를 가지고 있을 때(ex. 이메일) 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Intent 생성자&lt;/code&gt;를 사용하거나 &lt;code&gt;setAction()&lt;/code&gt;을 사용하여 &lt;code&gt;Action을 설정&lt;/code&gt;할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;Data&quot;&gt;&lt;a href=&quot;#Data&quot; class=&quot;headerlink&quot; title=&quot;Data&quot;&gt;&lt;/a&gt;Data&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Action을 수행할 data&lt;/code&gt; 또는 해당 data의 &lt;code&gt;MIME type&lt;/code&gt;을 참조하는 &lt;code&gt;URI Object&lt;/code&gt;이다. 일반적으로 action명을 보면 data를 추측할 수 있는데 예를 들어 action이 &lt;code&gt;ACTION_EDIT&lt;/code&gt;라면 data에는 편집할 문서의 &lt;code&gt;URI&lt;/code&gt;가 들어있어야 한다.&lt;/p&gt;
&lt;p&gt;Intent 생성 시 &lt;code&gt;URI&lt;/code&gt;와 함께 &lt;code&gt;Data type(MIME type)&lt;/code&gt;의 지정이 중요하다. 만약 이미지 처리용 application이 있을 때, URI가 비슷하다 할지라도 이 application에서는 오디오 처리를 할 수는 엇다.따라서  &lt;code&gt;MIME type&lt;/code&gt;을 지정해주는 것이 좋다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Data URI&lt;/code&gt;만 설정하려면 &lt;code&gt;setData()&lt;/code&gt;를 사용하고, &lt;code&gt;MIME type&lt;/code&gt;만 설정하려면 &lt;code&gt;setType()&lt;/code&gt;을 사용하면 된다.&lt;/p&gt;
&lt;p&gt;두 가지 모두 사용할 경우 &lt;code&gt;setData()&lt;/code&gt;와 &lt;code&gt;setType()&lt;/code&gt;은 서로의 값을 덮어버리는 특성이 있으므로 반드시 &lt;code&gt;setDataAndType()&lt;/code&gt;을 사용해야 한다.&lt;/p&gt;
&lt;p&gt;일반적으로 Action과 Data는 다음과 같은 짝을 갖는 경우가 많다.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;Action&lt;/th&gt;&lt;th&gt;URI&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;ACTION_VIEW&lt;/th&gt;&lt;td&gt;content://contacts/people/1&lt;/td&gt;&lt;td&gt;1번 사람에 대한 정보를 표시한다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;ACTION_DIAL&lt;/th&gt;&lt;td&gt;content://contacts/people/1&lt;/td&gt;&lt;td&gt;Dialer에 1번 사람의 번호를 채워서 보여준다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;ACTION_VIEW&lt;/th&gt;&lt;td&gt;tel:123&lt;/td&gt;&lt;td&gt;Dialer에 ‘123’을 채워서 보여준다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;ACTION_DIAL&lt;/th&gt;&lt;td&gt;tel:123&lt;/td&gt;&lt;td&gt;Dialer에 ‘123’을 채워서 보여준다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;ACTION_EDIT&lt;/th&gt;&lt;td&gt;content://contacts/people/1&lt;/td&gt;&lt;td&gt;1번 사용자에 대한 정보를 수줭한다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;ACTION_VIEW&lt;/th&gt;&lt;td&gt;content://contacts/people/&lt;/td&gt;&lt;td&gt;주소록 리스트를 띄운다. 이 리스트에서 특정 사용자를 선택할 경우 &lt;code&gt;ACTION_VIEW content://contacts/N&lt;/code&gt;이 시작된다.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;위의 두 가지 주 속성에 더하여, 아래에 설명할 몇 가지의 부 속성을 사용할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;Category&quot;&gt;&lt;a href=&quot;#Category&quot; class=&quot;headerlink&quot; title=&quot;Category&quot;&gt;&lt;/a&gt;Category&lt;/h3&gt;&lt;p&gt;Optional 항목이며 Intent를 처리해야 하는 component에 대한 추가 정보를 담고있다.&lt;/p&gt;
&lt;p&gt;몇 가지 보편적인 Category의 예이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CATEGORY_LAUNCHER&lt;ul&gt;
&lt;li&gt;Application 진입 시 최초의 Activity임을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CATEGORY_ALTERNATIVE&lt;ul&gt;
&lt;li&gt;Data의 일부에 대해 사용자가 사용할 수 있는 대체 action들에 대한 목록을 포함할 것을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CATEGORY_BROWSABLE&lt;ul&gt;
&lt;li&gt;대상 Activity가 스스로 Web browser에게 자신을 시작할 권한을 주며, link를 통해 참조된 data를 표시하게 한다. 이미지, 이메일, 메시지 등이 해당된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Category 지정은 &lt;code&gt;addCategory()&lt;/code&gt;를 통해서 설정한다.&lt;/p&gt;
&lt;h3 id=&quot;Type&quot;&gt;&lt;a href=&quot;#Type&quot; class=&quot;headerlink&quot; title=&quot;Type&quot;&gt;&lt;/a&gt;Type&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Intent data의 명시적인 type(MIME type)을 정의한다. 일반적인 경우 type은 data 자신으로부터 추측할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Component&quot;&gt;&lt;a href=&quot;#Component&quot; class=&quot;headerlink&quot; title=&quot;Component&quot;&gt;&lt;/a&gt;Component&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Intent에 사용하기 위한 component class의 명시적인 이름을 정의한다. 일반적으로 이 항목은 intent 내의 다른 정보(action, data/type, category)에 의해 정의되고 이를 다룰 수 있는 component에 매칭된다. 만약 이 속성이 세팅될 경우 아무 동작도 수행하지 않으며 이 component는 그 자체로만 사용된다. 이 속성을 정의함으로 인해 모든 다른 Intent 속성들은 optional 항목이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Extras&quot;&gt;&lt;a href=&quot;#Extras&quot; class=&quot;headerlink&quot; title=&quot;Extras&quot;&gt;&lt;/a&gt;Extras&lt;/h3&gt;&lt;p&gt;요청한 작업을 수행하기 위한 추가 정보를 담고 있다. &lt;code&gt;Key-Value pair&lt;/code&gt;로 이루어져 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;putExtras()&lt;/code&gt; 메소드를 사용하며, 모든 extra data를 갖는 &lt;code&gt;Bundle&lt;/code&gt;을 생성하여 직접 &lt;code&gt;putExtras()&lt;/code&gt;로 삽입할 수도 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;ACTION_SEND&lt;/code&gt;로 이메일을 전송할 경우, “받는 사람”을 &lt;code&gt;EXTRA_EMAIL&lt;/code&gt;로 지정하고, “제목”을 &lt;code&gt;EXTRA_SUBJECT&lt;/code&gt;로 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Intent class&lt;/code&gt;는 표준화된 data type들에 대해 많은 EXTRA_*를 지원하고 있다. 자신의 application만의 특정 extra key를 사용해야 할 경우 Package name을 prefix(접두사)로 포함시켜야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String EXTRA_GIGAWATTS = &lt;span class=&quot;string&quot;&gt;&quot;com.example.EXTRA_GIGAWATTS&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Flags&quot;&gt;&lt;a href=&quot;#Flags&quot; class=&quot;headerlink&quot; title=&quot;Flags&quot;&gt;&lt;/a&gt;Flags&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Intent class&lt;/code&gt;에서 정의하고 있으며, Meta-data 역할을 수행한다. Android system에 activity를 시작할 방법을 알려줄 수도 있고, activity를 시작한 후 어떻게 처리해야 하는 지도 알려줄 수 있다.&lt;/p&gt;
&lt;p&gt;지정은 &lt;code&gt;setFlags()&lt;/code&gt; 로 하면 된다.&lt;/p&gt;
&lt;h2 id=&quot;Intent의-type&quot;&gt;&lt;a href=&quot;#Intent의-type&quot; class=&quot;headerlink&quot; title=&quot;Intent의 type&quot;&gt;&lt;/a&gt;Intent의 type&lt;/h2&gt;&lt;p&gt;Intent type은 &lt;code&gt;Explicit&lt;/code&gt;, &lt;code&gt;Implicit&lt;/code&gt; 두 가지가 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Explicit intent&lt;/code&gt;는 &lt;code&gt;무엇을 할지&lt;/code&gt;, &lt;code&gt;Implicit intent&lt;/code&gt;는 &lt;code&gt;누구에게 던질지&lt;/code&gt;가 중요하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;application의 보안을 위해 Service의 시작 시에는 항상 Explicit intent만 사용하고 Intent filter는 선언하지 않도록 하라.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Explicit-명시적-intent&quot;&gt;&lt;a href=&quot;#Explicit-명시적-intent&quot; class=&quot;headerlink&quot; title=&quot;Explicit(명시적) intent&quot;&gt;&lt;/a&gt;Explicit(명시적) intent&lt;/h3&gt;&lt;p&gt;새 activity를 시작하거나 service를 시작할 때 사용한다. (ex. File download)&lt;/p&gt;
&lt;p&gt;일반적으로 application 안에서 component를 시작할 때 사용한다.&lt;/p&gt;
&lt;p&gt;시작할 component의 이름을 &lt;code&gt;Fully-Qualified class name&lt;/code&gt; (ex. Abc.Class)으로 지정한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Explicit intent&lt;/code&gt;를 사용할 경우 system이 즉시 지정된 component를 시작한다.&lt;/p&gt;
&lt;p&gt;아래 예시는 웹에서 파일을 다운로드 하도록 한 DownloadService를 시작하는 코드이다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Executed in an Activity, so &#39;this&#39; is the Context&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The fileUrl is a string URL, such as &quot;http://www.example.com/image.png&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Intent downloadIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, DownloadService.class);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;downloadIntent.setData(Uri.parse(fileUrl));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;startService(downloadIntent);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Implicit-암시적-intent&quot;&gt;&lt;a href=&quot;#Implicit-암시적-intent&quot; class=&quot;headerlink&quot; title=&quot;Implicit(암시적) intent&quot;&gt;&lt;/a&gt;Implicit(암시적) intent&lt;/h3&gt;&lt;p&gt;특정 component가 뭔지는 모르지만 현재 application이 수행할 수 없는 일반적인 작업을 다른 application의 component가 처리할 수 있도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Implicit intent&lt;/code&gt;를 사용하면 system이 시작시킬 적절한 component를 찾게 된다. 이 때, &lt;code&gt;intent&lt;/code&gt;의 내용을 다른 application들의 &lt;code&gt;Manifest file&lt;/code&gt;에 선언된 &lt;code&gt;Intent filter&lt;/code&gt;와 대조하는 작업을 거치고, 해당 기능을 수행할 수 있는 application이 여러개가 있다면, 사용자가 선택할 수 있도록 화면을 띄워준다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Intent filter&lt;/code&gt;란 &lt;code&gt;Manifest file&lt;/code&gt;에 선언한 해당 component가 수신하고자 하는 &lt;code&gt;Intent type&lt;/code&gt;에 대한 내용이다. 다른 application들이 여기에 선언한 내용을 기반으로 내 application의 기능을 사용할 수 있게 된다. &lt;code&gt;Intent filter&lt;/code&gt;에 아무 것도 선언하지 않는다면 &lt;code&gt;explicit intent&lt;/code&gt;로만 수행할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래 예시는 URI를 사용하지 않고 “text/plain” 정보를 통해 extra 정보를 지정한 후 &lt;code&gt;ACTION_SEND&lt;/code&gt;를 통해 implicit intent를 날리는 것이다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create the text message with a string&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Intent sendIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sendIntent.setAction(Intent.ACTION_SEND);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sendIntent.putExtra(Intent.EXTRA_TEXT, textMessage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sendIntent.setType(&lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Verify that the intent will resolve to an activity&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sendIntent.resolveActivity(getPackageManager()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    startActivity(sendIntent);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Implicit intent 사용 시 주의할 점은 &lt;code&gt;startActivity()&lt;/code&gt;를 통해 날려도 처리할 application이 전혀 표시되지 않을 수 있다. 이 경우 호출 실패는 물론 application이 죽는다.&lt;/p&gt;
&lt;p&gt;어떤 Activity에서라도 해당 intent를 확실히 수신할 수 있도록 하려면 위의 코드처럼 &lt;code&gt;resolveActivity()&lt;/code&gt;를 호출하여 미리 확인하자. 결과가 null이 아닌 경우 해당 intent를 처리할 수 있는 application이 최소 하나는 있다는 것을 의미한다.&lt;/p&gt;
&lt;p&gt;Implicit intent에 응답하는 application이 하나 이상일 경우, 사용자가 수행될 application을 선택할 수 있는데 이 때 띄워주는 메뉴를 &lt;code&gt;app chooser(앱 선택기)&lt;/code&gt;라 한다.&lt;/p&gt;
&lt;p&gt;Android는 사용자에게 항상 같은 application을 사용할 수 있는 옵션을 제공한다.&lt;/p&gt;
&lt;p&gt;하지만 특정한 케이스에서, 사용자가 항상 다른 application을 사용해야 한다면 앱 선택기를 명시적으로 표시할 필요가 있다.&lt;/p&gt;
&lt;p&gt;앱 선택기를 항상 표시하기 위해 아래와 같이 chooser intent생성 후 &lt;code&gt;createChooser()&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Intent sendIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_SEND);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Always use string resources for UI text.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This says something like &quot;Share this photo with&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String title = getResources().getString(R.string.chooser_title);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create intent to show the chooser dialog&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Intent chooser = Intent.createChooser(sendIntent, title);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Verify the original intent will resolve to at least one activity&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sendIntent.resolveActivity(getPackageManager()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    startActivity(chooser);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Intent-filter&quot;&gt;&lt;a href=&quot;#Intent-filter&quot; class=&quot;headerlink&quot; title=&quot;Intent filter&quot;&gt;&lt;/a&gt;Intent filter&lt;/h2&gt;&lt;p&gt;내 application이 수신할 수 있는 &lt;code&gt;Implicit intent&lt;/code&gt;가 어떤 것이 있는지 알리려면 application Component에 대한 하나 이상의 &lt;code&gt;intent filter&lt;/code&gt;를 &lt;code&gt;Manifest file&lt;/code&gt;에 선언해야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Explicit intent&lt;/code&gt;는 Component가 어떤 &lt;code&gt;intent filter&lt;/code&gt;를 선언했든 무관하게 항상 정의해둔 곳으로 전달된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;각 Intent filter는 다음과 같은 세 가지 요소 중 하나 이상을 사용하여 허용할 intent type을 정의할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;action&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;허용된 intent 작업을 name 속성에서 선언한다. Literal string이며 Class 상수가 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;data&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;허용된 data type을 선언한다. Data URI(scheme, host, port, path 등)와 MIME type 의 여러가지 내용 중 하나 이상의 속성을 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;category&amp;gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;허용된 intent category를 name 속성에서 선언한다. Literal string이며 Class 상수가 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit intent를 수신하기 위해서는 Intent filter 내에 반드시 &lt;code&gt;CATEGORY_DEFAULT&lt;/code&gt;를 포 함시켜야 한다. &lt;code&gt;startActivity()&lt;/code&gt;, &lt;code&gt;startActivityForResult()&lt;/code&gt; 메소드들은 모든 intent를 &lt;code&gt;CATEGORY_DEFAULT&lt;/code&gt;를 선언한 것처럼 취급하기 때문에 이 Category를 intent filter에 선언하지 않으면 Activity의 어떤 암시적 intent도 확인되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래 예시는 &lt;code&gt;Data type&lt;/code&gt;이 &lt;code&gt;text&lt;/code&gt;인 &lt;code&gt;ACTION_SEND&lt;/code&gt; intent를 수신하겠다는 뜻이다. Intent filter 내에 선언한 것들과 하나라도 맞지 않으면 intent가 application으로 전달되지 않는다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;activity android:name=&quot;ShareActivity&quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;action android:name=&quot;android.intent.action.SEND&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;data android:mimeType=&quot;text/plain&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Intent filter에 등록하지 않았다고 하더라도 다른 application에서 내 application Component의 경로를 알아챌 경우 내 component를 수행할 수 있게 된다. 이 경우를 방어하기 위해 Manifest의 &lt;activity&gt; 안에 &lt;code&gt;android:exported = false&lt;/code&gt;를 설정하면 된다.&lt;/activity&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래는 &lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android developer 사이트&lt;/a&gt;에서 제공하는 소셜 공유 application의 Manifest file이다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;activity android:name=&quot;MainActivity&quot;&amp;gt; // MainActivity 가 application의 Entry point(진입 지점)이다.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!-- This activity is the main entry, should appear in app launcher --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt; // 여기가 주요 진입 지점이며, 어떠한 intent도 바라지 않는 다는 것을 의미한다.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt; // 이 Activity의 icon이 system의 application 시작 관리자에 배치되어야 한다는 것을 나타낸다.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 여기서는 icon을 지정하지 않았으므로 system은 &amp;lt;application&amp;gt; 에서 가져온 아이콘을 사용한다.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;activity android:name=&quot;ShareActivity&quot;&amp;gt; // 컨텐츠 공유를 목적으로 만든 Activity이다.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!-- This activity handles &quot;SEND&quot; actions with text data --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;action android:name=&quot;android.intent.action.SEND&quot;/&amp;gt; // 다른 application에서 이 action과&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&amp;gt; // type이 text/plain인 category를 이 application으로 던졌을 때 이 activity를 수행한다.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;data android:mimeType=&quot;text/plain&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!-- This activity also handles &quot;SEND&quot; and &quot;SEND_MULTIPLE&quot; with media data --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;action android:name=&quot;android.intent.action.SEND&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;action android:name=&quot;android.intent.action.SEND_MULTIPLE&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;data android:mimeType=&quot;application/vnd.google.panorama360+jpg&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;data android:mimeType=&quot;image/*&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;data android:mimeType=&quot;video/*&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Pending-Intent&quot;&gt;&lt;a href=&quot;#Pending-Intent&quot; class=&quot;headerlink&quot; title=&quot;Pending Intent&quot;&gt;&lt;/a&gt;Pending Intent&lt;/h2&gt;&lt;p&gt;&lt;code&gt;PendingIntent&lt;/code&gt;는 &lt;code&gt;Intent&lt;/code&gt;의 &lt;code&gt;wrapper&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;다른 application에 권한을 위임하여 그 안에 들어있는 intent를 마치 본인 application의 자체 프로세스에서 실행하는 것처럼 사용하는 것이다.&lt;/p&gt;
&lt;p&gt;뭔 말인가 싶다. &lt;/p&gt;
&lt;p&gt;현재의 application A가 PendingIntent를 만들어서 다른 application이나 컴포넌트에 “내가 너에게 이 intent를 전달할 수 있는 권한을 줄테니 이따가 나 대신 좀 보내줘.” 라고 하는 것이다.&lt;/p&gt;
&lt;p&gt;주요 사용 사례는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 이 application의 &lt;code&gt;notification&lt;/code&gt;을 통해 task를 수행할 때 intent가 실행되도록 한다(Android system의 NotificationManager가 Intent를 실행한다.).&lt;/li&gt;
&lt;li&gt;사용자가 이 application의 &lt;code&gt;Application Widget&lt;/code&gt;으로 task를 수행할 때 intent가 실행되도록 한다(Mainscreen application에 Intent를 실행한다.).&lt;/li&gt;
&lt;li&gt;지정된 시간에 intent가 실행되도록 선언한다(Android system의 AlarmManager가 Intent를 실행한다.).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어, 아래 코드는 실행하면 Notification bar에 새 notification이 등록되고 사용자가 이 notification을 터치했을 때 MainActivity로 진입한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;NotificationManager nm = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PendingIntent pIntent = PendingIntent.getActivity(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, MainActivity.class), PendingIntent.FLAG_UPDATE_CURRENT);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Notification.Builder mBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Notification.Builder(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setSmallIcon(R.mipmap.ic_launcher);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setTicker(&lt;span class=&quot;string&quot;&gt;&quot;Notification.Builder&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setWhen(System.currentTimeMillis());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setNumber(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setContentTitle(&lt;span class=&quot;string&quot;&gt;&quot;Notification.Builder Title&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setContentText(&lt;span class=&quot;string&quot;&gt;&quot;Notification.Builder Massage&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_VIBRATE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setContentIntent(pIntent);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setAutoCancel(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mBuilder.setPriority(Notification.PRIORITY_MAX);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nm.notify(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, mBuilder.build());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;각 Intent object는 특정한 유형의 component(Activity, Service, BroadcastReceiver)가 처리하도록 설계되어 있다. 따라서 PendingIntent도 이러한 사항을 염두에 두고 생성해야 한다.&lt;/p&gt;
&lt;p&gt;PendingIntent를 사용하는 경우 직접적으로 startActivity() 등의 호출을 사용하지 않으므로 적절하게 세팅해줘야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity 시작 Intent: &lt;code&gt;PendingIntent.getActivitiy()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Service 시작 Intent: &lt;code&gt;PendingIntent.getService()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BroadcastReceiver 시작 Intent: &lt;code&gt;PendingIntent.getBroadcast()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Intent-살펴보기&quot;&gt;&lt;a href=&quot;#Intent-살펴보기&quot; class=&quot;headerlink&quot; title=&quot;Intent 살펴보기&quot;&gt;&lt;/a&gt;Intent 살펴보기&lt;/h2&gt;&lt;p&gt;system이 Activity를 시작하라는 implicit intent를 수신하면 system은 해당 intent에 대한 최선의 activity를 검색한다. 이 때 판단 근거가 아래 세 가지이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intent Action&lt;/li&gt;
&lt;li&gt;Intent Data (URI와 data type)&lt;/li&gt;
&lt;li&gt;Intent Category&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Action-test&quot;&gt;&lt;a href=&quot;#Action-test&quot; class=&quot;headerlink&quot; title=&quot;Action test&quot;&gt;&lt;/a&gt;Action test&lt;/h3&gt;&lt;p&gt;이 Filter를 통과하려면 아래 나열된 작업 중 하나와 일치해야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;action android:name=&quot;android.intent.action.EDIT&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;action android:name=&quot;android.intent.action.VIEW&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Category-test&quot;&gt;&lt;a href=&quot;#Category-test&quot; class=&quot;headerlink&quot; title=&quot;Category test&quot;&gt;&lt;/a&gt;Category test&lt;/h3&gt;&lt;p&gt;Intent 내의 모든 Category가 filter 내의 category와 일치해야 한다. Filter 내의 category 수가 더 많은 것은 상관 없다.&lt;/p&gt;
&lt;p&gt;Intent의 category가 아무 것도 선언되어 있지 않으면 모두 통과할 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Android는 &lt;code&gt;CATEGORY_DEFAULT&lt;/code&gt; category를 &lt;code&gt;startActivity()&lt;/code&gt; 및 &lt;code&gt;startActivityForResult()&lt;/code&gt;에 전달된 모든 implicit intent에 적용한다. 따라서 Activity가 implicit intent를 수신하기 위해서는 intent filter 내에 “android.intent.category.DEFAULT” category 선언이 반드시 포함되어 있어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Data-test&quot;&gt;&lt;a href=&quot;#Data-test&quot; class=&quot;headerlink&quot; title=&quot;Data test&quot;&gt;&lt;/a&gt;Data test&lt;/h3&gt;&lt;p&gt;URI 구조 및 Data type(MIME type)에 대해 나타내는데, URI의 각 부분에 대해서는 별도의 속성 (scheme, host, port, path)이 사용될 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;data android:mimeType=&quot;video/mpeg&quot; android:scheme=&quot;http&quot; ... /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;data android:mimeType=&quot;audio/mpeg&quot; android:scheme=&quot;http&quot; ... /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;content://com.example.project:200/folder/subfolder/etc&lt;ul&gt;
&lt;li&gt;scheme: content&lt;/li&gt;
&lt;li&gt;host: com.example.project&lt;/li&gt;
&lt;li&gt;port: 200&lt;/li&gt;
&lt;li&gt;path: folder/subfolder/etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 네 가지 속성에는 linear한 종속 관계가 존재한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scheme이 지정되지 않으면 host를 무시한다.&lt;/li&gt;
&lt;li&gt;host가 지정되지 않으면 port를 무시한다.&lt;/li&gt;
&lt;li&gt;scheme과 host 둘 다 지정되지 않으면 path를 무시한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Intent의 URI이 Filter의 URI와 비교될 때에는 filter 내에 포함된 URI와 부분적으로 비교된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;filter가 scheme만 지정한 경우, 해당 scheme을 가지는 모든 URI는 filter와 매칭된다.&lt;/li&gt;
&lt;li&gt;filter가 scheme과 authority를 지정하고 path를 지정하지 않는 경우, 같은 scheme과 authority를 갖는 모든 URI는 path와 관계 없이 filter를 통과한다.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;filter가 scheme, authority, path를 모두 지정할 경우, 같은 scheme, authority, path를 가진 URI만이 filter를 통과할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;path에는 * 을 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data의 유효성을 판별하기 위해서는 intent의 URI, MIME type과 filter의 URI, MIME type을 모두 비교해야 한다.&lt;/p&gt;
&lt;p&gt;  a. URI와 MIME type을 모두 갖지 않는 intent는 URI와 MIME type을 아무 것도 정의하지 않은 filter만을 통과할 수 있다.&lt;br&gt;  b. URI를 갖고 MIME type을 갖지 않는 intent는 filter의 URI와 일치하고 filter가 MIME type을 지정하지 않은 경우 통과할 수 있다.&lt;br&gt;  c. URI가 없고 MIME type만 갖는 intent는 filter가 URI를 지정하지 않고 MIME type을 가지고 있을 때 통과할 수 있다.&lt;br&gt;  d. URI와 MIME type을 모두 갖는 intent는 filter에 나열된 type과 매치되는 경우에만 통과한다. Intent의 URI가 filter의 URI와 일치하거나 &lt;code&gt;content:&lt;/code&gt; 또는 &lt;code&gt;file:&lt;/code&gt;을 가지고 있는 경우, 그리고 filter가 URI를 정의하지 않는 경우 통과할 수 있다. 다른 말로, filter가 MIME type만 가지고 있을 경우 component는 &lt;code&gt;content:&lt;/code&gt;와 &lt;code&gt;file:&lt;/code&gt;을 당연히 지원하는 것으로 여겨진다.&lt;/p&gt;
&lt;p&gt;규칙 d는 component가 file 또는 content provider로부터 local file을 가지고 올 수 있다는 기대를 가지고 반영된다. 따라서, 이러한 filter는 data type만 나열해도 되고 &lt;code&gt;content:&lt;/code&gt;와 &lt;code&gt;file:&lt;/code&gt; scheme을 명시적으로 작성하지 않아도 된다.&lt;/p&gt;
&lt;p&gt;아래 예시는 Content provider로부터 image data를 가지고 와서 표시할 수 있다는 의미를 갖는다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;data android:mimeType=&quot;image/*&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;아래 예시는 Network에서 Video data를 검색할 수 있다는 의미를 갖는다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;data android:scheme=&quot;http&quot; android:type=&quot;video/*&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Intent-matching&quot;&gt;&lt;a href=&quot;#Intent-matching&quot; class=&quot;headerlink&quot; title=&quot;Intent matching&quot;&gt;&lt;/a&gt;Intent matching&lt;/h2&gt;&lt;p&gt;  Intent를 Intent filter와 비교를 해보면 target component를 활성화 시킬 수 있을 뿐만 아니라 단말의 component set에 대한 정보를 발견할 수 있다. 예를 들어, Home application이 application 런쳐를 채우기 위해 ACTION_MAIN action과 CATEGORY_LAUNCH category를 갖는 intent filter들을 찾아볼 수 있다.&lt;/p&gt;
&lt;p&gt;  개발한 application에서 비슷한 방법을 사용할 수 있는데, Packagemanager는 &lt;code&gt;query...()&lt;/code&gt; 메소드들을 가지고 있고 이는 특정 intent로 접근할 수 있는 모든 component를 return한다. 이와 비슷한 것들로 &lt;code&gt;resolve...()&lt;/code&gt; 메소드들이 있다. 이는 intent를 응답하기 위한 최적의 component를 정의한다.&lt;/p&gt;
&lt;p&gt;  예를 들어, &lt;code&gt;queryIntentActivities()&lt;/code&gt;는 intent가 argument로써 통과할 수 있는 모든 activity의 list를 return하고, &lt;code&gt;queryIntentServices()&lt;/code&gt;는 service에 대한 list를 return한다. 두 가지 메소드 모두 component를 활성화 시키지는 않고 단지 list만 나열할 뿐이다. BroadcastReceiver에서 사용하는 것은 &lt;code&gt;queryBroadcastReceivers()&lt;/code&gt;가 있다.&lt;/p&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/components/fundamentals.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/guide/components/fundamentals.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/reference/android/content/Intent.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/components/intents-filters.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/guide/components/intents-filters.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/components/tasks-and-back-stack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/guide/components/tasks-and-back-stack.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/PendingIntent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/reference/android/app/PendingIntent.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/17/2016-07-17-android-intent/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Singleton</title>
      <link>http://lazyrodi.github.io/2016/07/16/2016-07-16-pattern-singleton/</link>
      <guid>http://lazyrodi.github.io/2016/07/16/2016-07-16-pattern-singleton/</guid>
      <pubDate>Sat, 16 Jul 2016 09:42:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;Singleton은 유일한 Instance를 만들어 사용하는 방법이다.&lt;/p&gt;
&lt;p&gt;생성자를 private으로 하여 다른 곳에서 Instance를 직접 생성할 수 없으며, public &lt;code&gt;getInstance()&lt;/code&gt;를 통해서만 i
      
      </description>
      
      <content:encoded>&lt;p&gt;Singleton은 유일한 Instance를 만들어 사용하는 방법이다.&lt;/p&gt;
&lt;p&gt;생성자를 private으로 하여 다른 곳에서 Instance를 직접 생성할 수 없으며, public &lt;code&gt;getInstance()&lt;/code&gt;를 통해서만 instance를 가져가서 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체 = Object = Compile된 각각의 .class file&lt;/li&gt;
&lt;li&gt;개체 = Instance = Compile된 .class file을 new 연산자를 사용하여 Memory에 Loading한 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기본적으로는 이런 느낌이다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Iamsingle mInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Iamsingle &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      mInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Iamsingle(); &lt;span class=&quot;comment&quot;&gt;// 누군가가 만들어둔 Instance가 없다면 만들어서 돌려줍시다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;필요성&quot;&gt;&lt;a href=&quot;#필요성&quot; class=&quot;headerlink&quot; title=&quot;필요성&quot;&gt;&lt;/a&gt;필요성&lt;/h2&gt;&lt;p&gt;설정 파일 등 여러 개가 있으면 혼란스러울 수 있는 경우 Singleton을 통해 하나의 자원만 사용할 수 있게 한다.&lt;/p&gt;
&lt;p&gt;전역적으로 접근이 가능해야 하지만 단 하나만 있어야 한다.&lt;/p&gt;
&lt;p&gt;전역 변수는 여러 개가 생성될 수 있기 때문에 Singleton을 사용하는 것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;싱글턴 패턴은 해당 클래스의 인스턴스가 하나만 만들어지고, 어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴입니다. - Head First Design Patterns&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;또한, Global Class는 어플리케이션이 시작될 때 항상 로딩되지만 Singleton Class는 시작되는 지점을 개발자가 지정할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;Trouble-shooting&quot;&gt;&lt;a href=&quot;#Trouble-shooting&quot; class=&quot;headerlink&quot; title=&quot;Trouble shooting&quot;&gt;&lt;/a&gt;Trouble shooting&lt;/h2&gt;&lt;h3 id=&quot;MultiThreading-문제-해결&quot;&gt;&lt;a href=&quot;#MultiThreading-문제-해결&quot; class=&quot;headerlink&quot; title=&quot;MultiThreading 문제 해결&quot;&gt;&lt;/a&gt;MultiThreading 문제 해결&lt;/h3&gt;&lt;p&gt;위쪽에서 표현한 코드는 &lt;code&gt;MultiThread 환경&lt;/code&gt;에서 &lt;code&gt;추가적인 Instance의 생성&lt;/code&gt;을 완전히 방어할 수 없다.&lt;/p&gt;
&lt;p&gt;고로, Thread 사용 시 기본적인 방어 방법인 &lt;code&gt;Syncronized&lt;/code&gt;를 붙여보기로 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Iamsingle mInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; Iamsingle &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      mInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Iamsingle(); &lt;span class=&quot;comment&quot;&gt;// 누군가가 만들어둔 Instance가 없다면 만들어서 돌려줍시다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Synchronized로-인한-성능-문제-해결&quot;&gt;&lt;a href=&quot;#Synchronized로-인한-성능-문제-해결&quot; class=&quot;headerlink&quot; title=&quot;Synchronized로 인한 성능 문제 해결&quot;&gt;&lt;/a&gt;Synchronized로 인한 성능 문제 해결&lt;/h3&gt;&lt;p&gt;Synchronized로 인한 MultiThreading 시의 성능은 엄청나게 떨어진다.&lt;/p&gt;
&lt;p&gt;고로, &lt;code&gt;Instance를 미리 생성&lt;/code&gt;해 보도록 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Iamsingle mInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Iamsingle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; Iamsingle &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;문제를-해결하는-또-다른-방법&quot;&gt;&lt;a href=&quot;#문제를-해결하는-또-다른-방법&quot; class=&quot;headerlink&quot; title=&quot;문제를 해결하는 또 다른 방법&quot;&gt;&lt;/a&gt;문제를 해결하는 또 다른 방법&lt;/h3&gt;&lt;p&gt;DCL (Double-Checking Locking) 이라는 방법으로 Instance가 생성되었으면 그냥 넘기고, 없는 경우에만 synchronized 를 걸어주어 Instance를 요청하는 Thread들에 부담을 덜어주는 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;volatile&lt;/code&gt; keyword는 Java 코드의 &lt;code&gt;변수(Variable)를 메모리에 저장(Store)&lt;/code&gt; 하라는 의미이다. &lt;code&gt;volatile 변수&lt;/code&gt;는 CPU cache를 사용하지 않고 Main memory에 직접 read/write 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;volatile&lt;/code&gt;에 대한 자세한 내용은 &lt;a href=&quot;http://noesse.tistory.com/28&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;여기&lt;/a&gt;를 참조해 보자.&lt;/p&gt;
&lt;p&gt;결론적으로 여기서는 CPU Cache를 통할 때 변수의 무결성을 보장할 수 없으므로 &lt;code&gt;volatile&lt;/code&gt;을 통해 Main memory에 직접 접근하겠다는 뜻이다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Iamsingle mInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iamsingle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Iamsingle &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 여기까지는 MultiThread 방어가 되지 않은 상태.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 위의 첫 번째 null check를 통과한 thread가 대기하고 있다가 들어왔을 확률이 있기 때문에 한 번 더 check.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          mInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Iamsingle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;마무리&quot;&gt;&lt;a href=&quot;#마무리&quot; class=&quot;headerlink&quot; title=&quot;마무리&quot;&gt;&lt;/a&gt;마무리&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;무분별하게 리팩토링 하겠다고 Singleton 남발하지 말 것.&lt;/li&gt;
&lt;li&gt;전역 설정이 필요할 때 등 꼭 필요할 때만 사용할 것.&lt;/li&gt;
&lt;li&gt;위에서 나열한 방법들 중 해당 어플리케이션에 적절한 것을 사용할 것. 단일 Thread를 사용하는 프로그램에서 굳이 synchronized로 성능 저하를 시킬 필요는 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://noesse.tistory.com/28&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://noesse.tistory.com/28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Head First Design Patterns - 한빛미디어, O’Reilly.&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/16/2016-07-16-pattern-singleton/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Reference] My Favorite Colors</title>
      <link>http://lazyrodi.github.io/2016/07/16/2016-07-16-works-my-favorite-colors/</link>
      <guid>http://lazyrodi.github.io/2016/07/16/2016-07-16-works-my-favorite-colors/</guid>
      <pubDate>Sat, 16 Jul 2016 08:20:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Color reference that I like.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Link : &lt;a href=&quot;http://lazyrodi.github.io/misc/MyFavoriteColors.html&quot;&gt;http://lazyrodi.github.io
      
      </description>
      
      <content:encoded>&lt;p&gt;Color reference that I like.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Link : &lt;a href=&quot;http://lazyrodi.github.io/misc/MyFavoriteColors.html&quot;&gt;http://lazyrodi.github.io/misc/MyFavoriteColors.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/16/2016-07-16-works-my-favorite-colors/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java Thread</title>
      <link>http://lazyrodi.github.io/2016/07/13/2016-07-13-java-thread/</link>
      <guid>http://lazyrodi.github.io/2016/07/13/2016-07-13-java-thread/</guid>
      <pubDate>Wed, 13 Jul 2016 11:42:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;Thread란 &lt;code&gt;프로그램 실행 시 프로세스 내부에 존재하는 수행 단위&lt;/code&gt;를 말한다.&lt;/p&gt;
&lt;p&gt;Java에서는 &lt;code&gt;두 가지&lt;/code&gt;의 Thread의 구현 방법이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread를 상속받아서 
      
      </description>
      
      <content:encoded>&lt;p&gt;Thread란 &lt;code&gt;프로그램 실행 시 프로세스 내부에 존재하는 수행 단위&lt;/code&gt;를 말한다.&lt;/p&gt;
&lt;p&gt;Java에서는 &lt;code&gt;두 가지&lt;/code&gt;의 Thread의 구현 방법이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread를 상속받아서 사용하는 방법&lt;ul&gt;
&lt;li&gt;이 경우 다른 Class의 상속이 불가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Runnable interface를 구현하는 방법&lt;ul&gt;
&lt;li&gt;일반적인 방법이다.&lt;/li&gt;
&lt;li&gt;다른 Class의 상속이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Thread-생성&quot;&gt;&lt;a href=&quot;#Thread-생성&quot; class=&quot;headerlink&quot; title=&quot;Thread 생성&quot;&gt;&lt;/a&gt;Thread 생성&lt;/h2&gt;&lt;p&gt;Thread 는 상태 변환을 통해 아래 그림과 같은 Lifecycle을 갖는다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-13-java-thread-001.jpg&quot; alt=&quot;Thread lifecycle&quot;&gt;&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;동작&lt;/th&gt;&lt;th&gt;상태&lt;/th&gt;&lt;th&gt;설명&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;객체 생성&lt;/td&gt;&lt;td&gt;NEW&lt;/td&gt;&lt;td&gt;Thread 객체의 생성 / start() 호출 전&lt;/td&gt;&lt;/tr&gt;&lt;td&gt;실행 대기&lt;/td&gt;&lt;td&gt;RUNNABLE&lt;/td&gt;&lt;td&gt;실행 상태로 언제든 갈 수 있는 상태&lt;/td&gt;&lt;tr&gt;&lt;td rowspan=&quot;3&quot;&gt;일시정지&lt;/td&gt;&lt;td&gt;WAITING&lt;/td&gt;&lt;td&gt;다른 Thread가 통지할 때까지 기다리는 상태&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TIMES_WAITING&lt;/td&gt;&lt;td&gt;주어진 시간동안 기다리는 상태&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BLOCKED&lt;/td&gt;&lt;td&gt;사용하고자 하는 객체의 Lock이 해제될 때까지 기다리는 상태&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;종료&lt;/td&gt;&lt;td&gt;TERMINATED&lt;/td&gt;&lt;td&gt;실행을 마친 상태&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id=&quot;Thread를-상속받아-사용하는-방법&quot;&gt;&lt;a href=&quot;#Thread를-상속받아-사용하는-방법&quot; class=&quot;headerlink&quot; title=&quot;Thread를 상속받아 사용하는 방법&quot;&gt;&lt;/a&gt;Thread를 상속받아 사용하는 방법&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Thread로 수행될 &lt;code&gt;Task&lt;/code&gt; class를 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String mName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Task(String str) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mName = str;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// Thread 시작 시 수행된다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;run &quot;&lt;/span&gt; + mName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Thread를 만들어 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;start()&lt;/code&gt;가 호출되면 새로운 Thread가 작업을 실행하는데 필요한 Call Stack을 생성하고 &lt;code&gt;run()&lt;/code&gt;을 호출하여 Stack에 저장한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;run()&lt;/code&gt; 메소드는 Thread scheduler에게 전달된다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tC = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tA.start(); &lt;span class=&quot;comment&quot;&gt;// start()를 호출하면 앞에서 만든 Task의 run()이 실행된다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tB.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tC.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Runnable-interface를-구현하여-사용하는-방법&quot;&gt;&lt;a href=&quot;#Runnable-interface를-구현하여-사용하는-방법&quot; class=&quot;headerlink&quot; title=&quot;Runnable interface를 구현하여 사용하는 방법&quot;&gt;&lt;/a&gt;Runnable interface를 구현하여 사용하는 방법&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Thread로 돌아갈 class를 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String mName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Task(String str) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mName = str;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;run &quot;&lt;/span&gt; + mName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;새 Thread 객체를 생성하여 start() 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;run() 으로 실행하면 단순히 Task 객체의 run() 메소드가 수행되는 것 뿐이다. start()로 해야 별도의 Thread가 생성되어 수행된다.&lt;/p&gt;
&lt;p&gt;Thread가 제대로 생성되어 수행되는지는 Eclipse의 debug 모드 등에서 threadStatus 등 thread 관련 항목들이 제대로 수행되는지 확인한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tA);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tB);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t1.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t2.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t3.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;아래와-같이-구현도-가능하다&quot;&gt;&lt;a href=&quot;#아래와-같이-구현도-가능하다&quot; class=&quot;headerlink&quot; title=&quot;아래와 같이 구현도 가능하다.&quot;&gt;&lt;/a&gt;아래와 같이 구현도 가능하다.&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;run&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;join&quot;&gt;&lt;a href=&quot;#join&quot; class=&quot;headerlink&quot; title=&quot;join()&quot;&gt;&lt;/a&gt;join()&lt;/h3&gt;&lt;p&gt;Thread의 수행 시간이 오래 걸릴 때, Thread보다 Main 함수가 먼저 종료되는 경우가 있다.&lt;/p&gt;
&lt;p&gt;이런 경우 &lt;code&gt;join()&lt;/code&gt; 메소드를 사용하면 모든 Thread들이 종료된 후 Main 함수가 종료된다.&lt;/p&gt;
&lt;p&gt;예를 들어, 아래 코드를 실행한 결과를 보면 &lt;code&gt;fin&lt;/code&gt;이 먼저 호출되는 것을 볼 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tA);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tB);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t4 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t5 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t1.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t2.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t3.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t4.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t5.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;fin&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 결과&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run c&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run b&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;다음과 같이 join()을 사용할 경우, Thread들이 모두 실행된 이후에 &lt;code&gt;fin&lt;/code&gt;이 찍힌다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tA);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tB);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t4 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t5 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t1.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t2.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t3.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t4.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t5.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t1.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t2.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t3.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t4.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t5.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;fin&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 결과&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run c&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Synchronized&quot;&gt;&lt;a href=&quot;#Synchronized&quot; class=&quot;headerlink&quot; title=&quot;Synchronized&quot;&gt;&lt;/a&gt;Synchronized&lt;/h2&gt;&lt;p&gt;Thread가 함수를 통해 전역변수에 변형을 가할 경우, 각 Thread가 돌면서 값이 잘못 변하는 경우가 있다.&lt;/p&gt;
&lt;p&gt;만약 아래와 같은 코드가 있다고 하면 (여기서는 10개지만 더 많이…) 마지막에 결과값이 10이 안 찍히고 9가 찍히는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;물론 실행할 때마다 값이 다르다.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;내가 만들어서 그런지 예시가 거지같다.&lt;/del&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String mName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; no = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Task(String str) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mName = str;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        no++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            inc();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(Exception e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;run &quot;&lt;/span&gt; + mName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Task tB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tA);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(tB);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t4 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t5 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t6 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;f&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t7 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;g&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t8 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;h&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t9 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;i&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Thread t10 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;j&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t1.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t2.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t3.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t4.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t5.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t6.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t7.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t8.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t9.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t10.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t1.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t2.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t3.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t4.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t5.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t6.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t7.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t8.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t9.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            t10.join();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(tA.no);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;fin&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 결과&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run a no: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run d no: &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run c no: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run i no: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run j no: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run e no: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run f no: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run g no: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run b no: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;run h no: &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;위의 문제가 발생하는 이유는 예를 들면 하나의 Thread가 no를 3에서 4로 증가시키고 있을 때 다른 Thread가 접근하고, 그 Thread도 3에서 4로 증가시키게 된다.&lt;/p&gt;
&lt;p&gt;그러면 &lt;code&gt;inc()&lt;/code&gt;가 두 번 수행되었더라도 &lt;code&gt;no&lt;/code&gt;는 4에 머물러있게 된다.&lt;/p&gt;
&lt;p&gt;이러한 문제를 방지하기 위해 &lt;code&gt;no++&lt;/code&gt; 과정을 &lt;code&gt;synchronized(동기화)&lt;/code&gt; 시켜주면 된다.&lt;/p&gt;
&lt;p&gt;하나의 Thread가 &lt;code&gt;synchronized&lt;/code&gt; 키워드 안의 내용을 수행 중이라면 다른 Thread는 그 자원에 접근할 수 없게 된다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String mName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; no = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Task(String str) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mName = str;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        no++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            inc();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(Exception e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;run &quot;&lt;/span&gt; + mName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-Pool&quot;&gt;&lt;a href=&quot;#Thread-Pool&quot; class=&quot;headerlink&quot; title=&quot;Thread Pool&quot;&gt;&lt;/a&gt;Thread Pool&lt;/h2&gt;&lt;p&gt;Thread를 생성하기 위해서는 시간과 메모리가 소요된다. Java는 JVM(Java Virtual Machine) 위에서 돌아가고 JVM은 Thread의 생성 개수를 제한하지 않는다.&lt;/p&gt;
&lt;p&gt;때문에 Thread를 과도하게 생성한다면 성능 저하는 물론 Memory leak이 발생한다.&lt;/p&gt;
&lt;p&gt;Thread의 무분별한 생성을 막기 위해 쓰레드 관리 방식인 &lt;code&gt;Thread Pool&lt;/code&gt;을 사용한다.&lt;/p&gt;
&lt;p&gt;Thread Pool은 Thread를 허용된 개수 안에서 사용할 수 있도록 제약한다. 이 제약은 JVM이 하는 것이 아니라 어플리케이션에서 해야 한다.&lt;/p&gt;
&lt;p&gt;JDK 1.5 이전에는 개발자가 직접 만들어서 사용했으며, 1.5부터 &lt;code&gt;java.util.concurrent&lt;/code&gt; 를 통해 지원하게 되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excutors.newFixedThreadPool(n)&lt;ul&gt;
&lt;li&gt;최대 Thread 수가 n 개인 Pool.&lt;/li&gt;
&lt;li&gt;동시에 일어나는 업무량이 비교적 일정할 때 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Excutors.newCachedThreadPool()&lt;ul&gt;
&lt;li&gt;Thread 수의 제한을 두지 않는다. 새로운 Thread 시작 요청이 들어올 때마다 Thread를 하나씩 생성한다.&lt;/li&gt;
&lt;li&gt;수행이 종료된 Thread들이 바로 사라지지 않고 1분동안 살아있다가 다른 작업 요청이 없다면 사라지게 된다.&lt;/li&gt;
&lt;li&gt;짧고 반복되는 작업에 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Executors.newSingleThreadExecutor()&lt;ul&gt;
&lt;li&gt;하나의 Thread를 생성한다.&lt;/li&gt;
&lt;li&gt;주로 Thread 작업 중 예외가 발생한 경우 예외 처리를 위한 Thread 생성 용으로 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;선언은 &lt;code&gt;ExecutorService&lt;/code&gt; 로 한다.&lt;/p&gt;
&lt;h4 id=&quot;Excutors-newFixedThreadPool-n&quot;&gt;&lt;a href=&quot;#Excutors-newFixedThreadPool-n&quot; class=&quot;headerlink&quot; title=&quot;Excutors.newFixedThreadPool(n)&quot;&gt;&lt;/a&gt;Excutors.newFixedThreadPool(n)&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ExecutorService executorService = Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Thread 생성 요청.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Task는 수행할 class 명.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 세 번 요청하면 세 번째 Thread는 앞의 두 개 중 하나가 종료될 때까지 수행되지 않는다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;executorService.execute(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;executorService.shutdown(); &lt;span class=&quot;comment&quot;&gt;// 추가적인 Thread 요청을 거부한다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!executorService.isTreminated()) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 모든 Thread가 완료될 때까지 대기한다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Excutors-newCachedThreadPool&quot;&gt;&lt;a href=&quot;#Excutors-newCachedThreadPool&quot; class=&quot;headerlink&quot; title=&quot;Excutors.newCachedThreadPool()&quot;&gt;&lt;/a&gt;Excutors.newCachedThreadPool()&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ExecutorService executorService = Executor.newCachedThreadPool();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;executorService.execute(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;executorService.shutdown();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!executorService.isTreminated()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Executors-newSingleThreadExecutor&quot;&gt;&lt;a href=&quot;#Executors-newSingleThreadExecutor&quot; class=&quot;headerlink&quot; title=&quot;Executors.newSingleThreadExecutor()&quot;&gt;&lt;/a&gt;Executors.newSingleThreadExecutor()&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ExecutorService executorService = Executors.newSingleThreadExecutor();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;executorService.execute(()-&amp;gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;executorService.shutdown();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!executorService.isTreminated()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.naver.com/2feelus/220728222140&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.naver.com/2feelus/220728222140&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.naver.com/kksssii/220676622695&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.naver.com/kksssii/220676622695&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/13/2016-07-13-java-thread/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo로 변경</title>
      <link>http://lazyrodi.github.io/2016/07/11/2016-07-11-life-change-to-hexo/</link>
      <guid>http://lazyrodi.github.io/2016/07/11/2016-07-11-life-change-to-hexo/</guid>
      <pubDate>Mon, 11 Jul 2016 13:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;원래 사용하던 &lt;a href=&quot;https://github.com/jekyll/jekyll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt;에서 &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; 
      
      </description>
      
      <content:encoded>&lt;p&gt;원래 사용하던 &lt;a href=&quot;https://github.com/jekyll/jekyll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt;에서 &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;로 변경하였다.&lt;/p&gt;
&lt;p&gt;이 테마(&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-hueman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hueman&lt;/a&gt;)가 상당히 완성도가 높아보여서 따라하느라 변경하였는데 &lt;code&gt;Jekyll&lt;/code&gt;보다 지원하는 기능이 화려하다. (혹은 내가 Jekyll도 제대로 못 썼겠지.)&lt;/p&gt;
&lt;p&gt;맘에 든다. &lt;a href=&quot;https://hexo.io/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;설명&lt;/a&gt;도 꽤 간단하고 알아먹기 쉽게 제공되어서 좋다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Jekyll&lt;/code&gt;에서 가져온 글들이 &lt;code&gt;markdown&lt;/code&gt;간 호환이 100% 되지는 않아서 테이블과 그림 작업이 더 필요하지만… 그래도 뭐 굳.&lt;/p&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/11/2016-07-11-life-change-to-hexo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android permission</title>
      <link>http://lazyrodi.github.io/2016/07/10/2016-07-10-android-permission/</link>
      <guid>http://lazyrodi.github.io/2016/07/10/2016-07-10-android-permission/</guid>
      <pubDate>Sun, 10 Jul 2016 10:47:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;안드로이드는 privilege-separated OS이다. 각각의 어플리케이션들은 서로 다른 system ID(Linux의 User ID 또는 Group ID)로 구분된다.&lt;/p&gt;
&lt;p&gt;안드로이드 시스템의 보안 기능은 세분화 되어있으며 &lt;code
      
      </description>
      
      <content:encoded>&lt;p&gt;안드로이드는 privilege-separated OS이다. 각각의 어플리케이션들은 서로 다른 system ID(Linux의 User ID 또는 Group ID)로 구분된다.&lt;/p&gt;
&lt;p&gt;안드로이드 시스템의 보안 기능은 세분화 되어있으며 &lt;code&gt;Permission Mechanism&lt;/code&gt;에 의해 동작한다.&lt;/p&gt;
&lt;p&gt;안드로이드 시스템은 시스템 자체의 &lt;code&gt;무결성(Integrity)&lt;/code&gt;과 &lt;code&gt;개인 정보 보호&lt;/code&gt;를 위해 각 어플리케이션이 &lt;code&gt;sandbox&lt;/code&gt;(보호된 영역) 내에서만 동작하도록 제한해 두었다.&lt;/p&gt;
&lt;p&gt;어플리케이션이 자신의 &lt;code&gt;sandbox&lt;/code&gt; 밖의 리소스, 파일 등의 사용을 원할 때에는 명시적으로 해당 &lt;code&gt;permission&lt;/code&gt;에 대해 요청하고 획득해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Permission&lt;/code&gt;은 특정 프로세스가 특정 기능을 수행하기 위해 필요한 권한을 의미하며, 사용자가 허가를 해야 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;안드로이드의 System permission은 두 가지 종류로 나눌 수 있다. (&lt;a href=&quot;https://developer.android.com/guide/topics/security/permissions.html#normal-dangerous&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Normal and Dangerous Permissions&lt;/a&gt; 참조)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Normal permissions&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;다른 프로세스, 데이터, 사용자에게 악영향을 주지 못하는 권한들.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dangerous permissions&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;파일 저장 및 운용, 주소록 접근 등 다른 요소에 악영향을 줄 수도 있는 권한들.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;안드로이드 시스템은 어플리케이션이 &lt;code&gt;Normal permissions&lt;/code&gt;을 요청하면 자동으로 권한을 부여하고, &lt;code&gt;Dangerous permissions&lt;/code&gt;를 요청하면 &lt;code&gt;사용자에게 Dialog를 통해 확인(Dangerous permissions)&lt;/code&gt;을 받은 후 허가를 해준다.&lt;/p&gt;
&lt;p&gt;사용자에게 확인을 받는 동작은 안드로이드 버전에 따라 다르게 동작한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android 5.1 (Lollipop) 이하&lt;ul&gt;
&lt;li&gt;어플리케이션 설치 시 사용할 permission들에 대해 사용자의 허가를 받음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android 6.0 (Marshmallow) 이상&lt;ul&gt;
&lt;li&gt;Runtime에 permission을 부여할지 묻는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;System-Permissions&quot;&gt;&lt;a href=&quot;#System-Permissions&quot; class=&quot;headerlink&quot; title=&quot;System Permissions&quot;&gt;&lt;/a&gt;System Permissions&lt;/h2&gt;&lt;h3 id=&quot;Security-architecture&quot;&gt;&lt;a href=&quot;#Security-architecture&quot; class=&quot;headerlink&quot; title=&quot;Security architecture&quot;&gt;&lt;/a&gt;Security architecture&lt;/h3&gt;&lt;p&gt;안드로이드는 기본적으로 &lt;code&gt;Permission&lt;/code&gt;이 없으면 하나의 어플리케이션이 다른 어플리케이션, OS, user에게 위해를 가할 수 없다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;permission&lt;/code&gt; 없이는 주소록이나 이메일 등의 접근할 수 없고 다른 어플리케이션에 속한 파일에 접근할 수 없다는 뜻이다.&lt;/p&gt;
&lt;p&gt;어플리케이션은 필요로 하는 &lt;code&gt;permission&lt;/code&gt;에 대해 Application Manifest 파일에 static하게 선언해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;uses-permission&amp;gt;&lt;/code&gt; 태그를 이용하며, 아래의 예시는 SMS의 발신 권한을 획득하기 위한 선언이다.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;package&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.example.snazzyapp&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.SEND_SMS&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;manifest&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;어플리케이션 Sandbox는 어플리케이션이 어떻게 빌드 되었던 간에 독립적으로 동작하며 어플리케이션의 형태(Java, native, hybrid)에 관련 없이 같은 방식, 같은 강도의 보안을 가지고 있다.&lt;/p&gt;
&lt;p&gt;Permission의 요청이 실패할 경우 &lt;code&gt;SecurityException&lt;/code&gt;을 return받게 된다. 하지만 요청이 실패한다고 해서 반드시 이 exception이 발생하는 것은 아니다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;sendBroadcast(Intent)&lt;/code&gt; 메소드는 각각의 receiver로 전달되는 데이터에 대해 permission check를 진행하지만 값이 return될 때 permission failure가 발생했었는지 여부는 알 수 없게 된다.&lt;/p&gt;
&lt;p&gt;그래도 대부분 permission failure에 대한 정보는 system log에 남기 때문에 이상 여부를 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;사용 가능한 &lt;code&gt;Permission&lt;/code&gt;의 종류는 &lt;a href=&quot;https://developer.android.com/reference/android/Manifest.permission.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manifest.permission&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;아래와 같은 특정한 상황에서는 어플리케이션 동작 중에 별도의 &lt;code&gt;permission&lt;/code&gt;을 요구하게 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템에 대한 호출 시&lt;ul&gt;
&lt;li&gt;어플리케이션이 특정 기능을 무단으로 사용하는 것을 방지하기 위해&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity가 시작될 때&lt;ul&gt;
&lt;li&gt;다른 어플리케이션의 activity가 임의로 시작되는 것을 막기 위해&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Broadcast의 전송/수신 시&lt;ul&gt;
&lt;li&gt;내가 보낸 Broadcast를 누가 받았는지, 누가 나에게 Broadcast를 보냈는지 제어하기 위해&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content provider에 접근 시&lt;/li&gt;
&lt;li&gt;Service를 시작하거나 Binding 할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Application-Signing&quot;&gt;&lt;a href=&quot;#Application-Signing&quot; class=&quot;headerlink&quot; title=&quot;Application Signing&quot;&gt;&lt;/a&gt;Application Signing&lt;/h3&gt;&lt;p&gt;모든 APK들은 개발자의 private key을 이용한 인증과정을 통해 서명된 상태여야 한다. 서명은 특별히 인증기관 등의 허가를 받는 것은 아니며, 개발자 스스로 생성한 key로 서명할 수 있다.&lt;/p&gt;
&lt;p&gt;서명의 목적은 제작자가 누구인지 구분하는 것이다. (복제 방지, 악용 방지)&lt;/p&gt;
&lt;p&gt;서명을 통해 시스템은 어플리케이션이 &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/permission-element.html#plevel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;signature-level permissions&lt;/a&gt; (normal, dangerous, signature, signatureOrSystem)에 접근할 수 있는 권한을 부여/거부한다.&lt;/p&gt;
&lt;p&gt;어플리케이션이 &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/manifest-element.html#uid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;다른 어플리케이션과 동일한 Linux ID를 사용&lt;/a&gt;하려 할 때에도 서명 정보를 필요로 한다.&lt;/p&gt;
&lt;h3 id=&quot;User-ID와-File-access&quot;&gt;&lt;a href=&quot;#User-ID와-File-access&quot; class=&quot;headerlink&quot; title=&quot;User ID와 File access&quot;&gt;&lt;/a&gt;User ID와 File access&lt;/h3&gt;&lt;p&gt;어플리케이션 설치 시 안드로이드는 각각의 package에 각각 다른 Linux user ID를 부여한다. 이는 상수값이며 해당 package가 죽을 때까지 가지고 있는다.&lt;/p&gt;
&lt;p&gt;보안 권한은 Process level에 존재하고, 일반적으로 서로 다른 두 개의 package가 하나의 process에서 수행되는 일은 없다. 보통 서로 다른 Linux user로 동작한다.&lt;/p&gt;
&lt;p&gt;하지만 AndroidManifest.xml의 manifest tag 내에 &lt;a href=&quot;https://developer.android.com/reference/android/R.attr.html#sharedUserId&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sharedUserId&lt;/a&gt; 속성을 사용하게 되면 서로 다른 package들이 같은 user ID를 사용할 수도 있다.&lt;/p&gt;
&lt;p&gt;이 방법을 통해, 보안을 목적으로 하는 두 개의 package가 하나의 어플리케이션인척 행동하게 된다. 이 때 user ID 및 file에 대한 권한을 동일하게 갖는다.&lt;/p&gt;
&lt;p&gt;보안을 유지하기 위해 동일한 서명을 사용한 어플리케이션 중 단 두 개의 어플리케이션만 동일한 user ID를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;어플리케이션이 저장한 data들은 해당 어플리케이션의 user ID에 할당되며, 기본적으로 다른 package에서는 접근이 불가하다.&lt;/p&gt;
&lt;p&gt;어플리케이션이 새로 만들거나 저장하는 파일들에 대한 메소드는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getSharedPreferences(String, int)&lt;/li&gt;
&lt;li&gt;openFileOutput(String, int)&lt;/li&gt;
&lt;li&gt;openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;만약 다른 package들이 read/write를 할 수 있게 하려면 &lt;code&gt;MODE_WORLD_READABLE&lt;/code&gt;, &lt;code&gt;MODE_WORLD_WRITEABLE&lt;/code&gt; flag를 사용해야 한다. 이 flag들을 사용하여도 소유권은 변하지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;Automatic-permission-adjustments&quot;&gt;&lt;a href=&quot;#Automatic-permission-adjustments&quot; class=&quot;headerlink&quot; title=&quot;Automatic permission adjustments&quot;&gt;&lt;/a&gt;Automatic permission adjustments&lt;/h3&gt;&lt;p&gt;시간이 지나면서(새로운 sdk가 나오면) 이전에는 없던 permission이 만들어지기도 한다. 해당 permission이 만들어지기 전에 생성된 어플리케이션은 당연히 권한 없이도 이를 사용할 수 있다는 가정 하에 개발되었기 때문에 관련 기능을 사용하려면 에러가 날 수도 있다.&lt;/p&gt;
&lt;p&gt;에러를 방지하기 위해 안드로이드는 Manifest에 새 permission에 대한 코드를 추가한다. 추가할지 말지 결정하는 근거가 되는 것이 &lt;code&gt;targetSdkVersion&lt;/code&gt; 이며, 이 값이 permission이 생성된 버전보다 낮다면 안드로이드는 permission을 추가한다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; permission은 공유된 저장소에 접근하는 것을 제한하기 위해 API level 4에 만들어졌다. 만약 &lt;code&gt;targetSdkVersion&lt;/code&gt;이 3보다 낮다면 이 permission은 자동으로 추가된다.&lt;/p&gt;
&lt;p&gt;만약 이 경우처럼 자동으로 permission이 추가되는 경우, Google Play에서 이러한 권한들에 대해 보여주게 된다. (실제로 그 어플리케이션에서 사용하지 않더라도 보여준다.)&lt;/p&gt;
&lt;p&gt;사용하지 않는 permission을 제거하기 위해서는 어플리케이션의 &lt;code&gt;targetSdkVersion&lt;/code&gt;을 항상 최신화하여 유지하는 것이 좋다. &lt;a href=&quot;https://developer.android.com/reference/android/os/Build.VERSION_CODES.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build.VERSION_CODES&lt;/a&gt;를 통해 각 버전 별로 업데이트 된 permission 목록을 확인할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;Permission-groups&quot;&gt;&lt;a href=&quot;#Permission-groups&quot; class=&quot;headerlink&quot; title=&quot;Permission groups&quot;&gt;&lt;/a&gt;Permission groups&lt;/h3&gt;&lt;p&gt;모든 &lt;code&gt;dangerous Android system permission&lt;/code&gt;은 &lt;code&gt;permission group&lt;/code&gt;에 속해있다. &lt;/p&gt;
&lt;p&gt;Permission이 같은 group에 속한 경우 사용자에게 한 번만 사용 허가를 받으면 같은 group에 속한 다른 permission들도 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;READ_CONTACTS&lt;/code&gt;에 대한 권한을 사용자로부터 허가받아 부여받았다면, &lt;code&gt;WRITE_CONTACTS&lt;/code&gt; 권한은 자동으로 부여받는다.&lt;/p&gt;
&lt;p&gt;[표 1. Dangerous permissions and permission groups]&lt;/p&gt;
&lt;p&gt;|————-+——————————|&lt;br&gt;| CALENDAR | READ_CALENDAR |&lt;br&gt;|          | WRITE_CALENDAR |&lt;br&gt;| CAMERA   | CAMERA |&lt;br&gt;| CONTACTS | READ_CONTACTS |&lt;br&gt;|          | WRITE_CONTACTS |&lt;br&gt;|          | GET_ACCOUNTS |&lt;br&gt;| LOCATION | ACCESS_FINE_LOCATION |&lt;br&gt;|          | ACCESS_COARSE_LOCATION |&lt;br&gt;| MICROPHONE | RECORD_AUDIO |&lt;br&gt;| PHONE | READ_PHONE_STATE |&lt;br&gt;|       | CALL_PHONE |&lt;br&gt;|       | READ_CALL_LOG |&lt;br&gt;|       | WRITE_CALL_LOG |&lt;br&gt;|       | ADD_VOICEMAIL |&lt;br&gt;|       | USE_SIP |&lt;br&gt;|       | PROCESS_OUTGOING_CALLS |&lt;br&gt;| SENSORS | BODY_SENSORS |&lt;br&gt;| SMS | SEND_SMS |&lt;br&gt;|     | RECEIVE_SMS |&lt;br&gt;|     | READ_SMS |&lt;br&gt;|     | RECEIVE_WAP_PUSH |&lt;br&gt;|     | RECEIVE_MMS |&lt;br&gt;| STORAGE | READ_EXTERNAL_STORAGE |&lt;br&gt;|         | WRITE_EXTERNAL_STORAGE |&lt;/p&gt;
&lt;h3 id=&quot;Permission의-정의-및-제한&quot;&gt;&lt;a href=&quot;#Permission의-정의-및-제한&quot; class=&quot;headerlink&quot; title=&quot;Permission의 정의 및 제한&quot;&gt;&lt;/a&gt;Permission의 정의 및 제한&lt;/h3&gt;&lt;p&gt;Permission을 적용하기 위해서는 &lt;code&gt;AndroidManifest.xml&lt;/code&gt;에 &lt;code&gt;&amp;lt;permission&amp;gt;&lt;/code&gt; 태그를 사용하여 정의해야 한다.&lt;/p&gt;
&lt;p&gt;아래의 예시는 어플리케이션이 자신이 가진 activity 중 하나를 시작하는 권한을 다른 어플리케이션에게 부여하기 위해 permission을 선언한 것이다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    package=&quot;com.example.myapp&quot; &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;permission android:name=&quot;com.example.myapp.permission.DEADLY_ACTIVITY&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:label=&quot;@string/permlab_deadlyActivity&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:description=&quot;@string/permdesc_deadlyActivity&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:permissionGroup=&quot;android.permission-group.COST_MONEY&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        android:protectionLevel=&quot;dangerous&quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;참고로 모든 package가 동일한 인증서로 서명하지 않은 한, 여러 package가 동일한 이름의 permission을 선언할 수는 없다.&lt;/p&gt;
&lt;p&gt;하나의 Package가 permission을 선언한 경우 시스템은 같은 permission 이름을 가진 다른 package가 시스템에 설치되는 것을 막는다. 물론 이미 설치되어 있는 package와 동일한 서명을 가지고 있다면 설치를 허가한다.&lt;/p&gt;
&lt;p&gt;이런 충돌을 피하기 위해 안드로이드에서는 &lt;code&gt;reverse-domain-style naming&lt;/code&gt;을 추천한다. ex. &lt;code&gt;com.example.myapp.ENGAGE_HYPERSPACE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;위의 예시에서 하나하나 살펴보면;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protectionLevel&lt;ul&gt;
&lt;li&gt;Mandatory 항목이다.&lt;/li&gt;
&lt;li&gt;시스템이 어플리케이션이 이 권한을 필요로 하는 이유 또는 이 권한을 가지고 있는 것들이 무엇인지 사용자에게 알려주기 위한 속성이다.&lt;/li&gt;
&lt;li&gt;아래 AndroidManifestPermission_protectionLevel 을 살펴보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;android:permissionGroup&lt;ul&gt;
&lt;li&gt;Optional 항목이다.&lt;/li&gt;
&lt;li&gt;시스템이 권한에 대해 사용자에게 보여줄 때에만 사용된다. 대부분의 경우, &lt;code&gt;standard system group&lt;/code&gt;(&lt;a href=&quot;https://developer.android.com/reference/android/Manifest.permission_group.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android.Manifest.permission_group&lt;/a&gt;)으로 설정하게 된다.&lt;ul&gt;
&lt;li&gt;CALENDAR&lt;/li&gt;
&lt;li&gt;CAMERA&lt;/li&gt;
&lt;li&gt;CONTACTS&lt;/li&gt;
&lt;li&gt;LOCATION&lt;/li&gt;
&lt;li&gt;MICROPHONE&lt;/li&gt;
&lt;li&gt;PHONE&lt;/li&gt;
&lt;li&gt;SENSORS&lt;/li&gt;
&lt;li&gt;SMS&lt;/li&gt;
&lt;li&gt;STORAGE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;개발자가 직접 정의할 수도 있다. 하지만 왠만하면 기존에 있는 것으로 사용하자.&lt;/li&gt;
&lt;li&gt;안드로이드 폰에서 설정 &amp;gt; 앱 &amp;gt; 앱 설정 &amp;gt; 앱 권한 으로 가면 &lt;code&gt;permissionGroup&lt;/code&gt;으로 묶여있는 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;android:label&lt;/li&gt;
&lt;li&gt;android:description&lt;ul&gt;
&lt;li&gt;label 및 description은 사용자가 permission list 확인 시 보여줄 제목 및 상세 내용이다. 새로 추가해야 한다면 가능한 짧게 작성하라.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래는 &lt;code&gt;CALL_PHONE&lt;/code&gt; permission에 대한 label 및 description 예시이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ adb shell pm list permissions&lt;/code&gt; 명령어를 통해 현지 시스템에서 사용하고 있는 권한들을 확인할 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;string name=&quot;permlab_callPhone&quot;&amp;gt;directly call phone numbers&amp;lt;/string&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;string name=&quot;permdesc_callPhone&quot;&amp;gt;Allows the application to call&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    phone numbers without your intervention. Malicious applications may&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cause unexpected calls on your phone bill. Note that this does not&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    allow the application to call emergency numbers.&amp;lt;/string&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;AndroidManifestPermission-protectionLevel&quot;&gt;&lt;a href=&quot;#AndroidManifestPermission-protectionLevel&quot; class=&quot;headerlink&quot; title=&quot;AndroidManifestPermission_protectionLevel&quot;&gt;&lt;/a&gt;AndroidManifestPermission_protectionLevel&lt;/h4&gt;&lt;p&gt;|———————–+——————-+———————|&lt;br&gt;| Constant | Value | Description |&lt;br&gt;| normal | 0 | 낮은 위험도를 가진 permission. 어플리케이션이 다른 어플리케이션에 별다른 영향을 주지 않는 부분으로 접근을 시도한다. 시스템은 이 권한을 요청하는 어플리케이션에게 권한을 자동적으로 부여한다. |&lt;br&gt;| dangerous | 1 | 높은 위험도를 가진 permission. 어플리케이션이 개인 정보 및 디바이스를 나쁜 목적으로 사용이 가능하다. 시스템은 이 권한을 자동으로 부여하지 않고 사용자에게 허가를 요구하는 dialog 를 띄워서 허가를 받는다. |&lt;br&gt;| signature | 2 | 같은 인증서로 서명된 어플리케이션에게만 이 권한을 허가한다. 인증서가 동일한 것이 판명되면 시스템은 자동적으로 권한을 부여한다. |&lt;br&gt;| signatureOrSystem | 3 | 안드로이드 시스템 이미지 내의 package 또는 같은 인증서로 서명된 어플리케이션에게만 권한을 허가한다. 이 옵션은 피해야 하며, Signature protection level은 대부분의 요구를 충족시켜야 하고 어플리케이션이 어디에 설치되었건 정확하게 동작해야 한다. |&lt;br&gt;| privileged | 0x10 | base permission type으로부터 파생된 추가적인 flag로 이 permission은 시스템 이미지에 설치된 privileged app들에 부여될 수 있다. 이 옵션은 피해야 하며, Signature protection level은 대부분의 요구를 충족시켜야 하고 어플리케이션이 어디에 설치되었건 정확하게 동작해야 한다. |&lt;br&gt;| system | 0x10 | “privileged”와 동일하다. 이전에 사용하던 용어. |&lt;br&gt;| development | 0x20 | base permission type으로부터 파생된 추가적인 flag로 개발용 어플리케이션에 선택적으로 부여될 수 있다. |&lt;br&gt;| appop | 0x40 | base permission type으로부터 파생된 추가적인 flag로 제어 권한을 위한 app op과 밀접한 관련을 가지고 있음. |&lt;br&gt;| pre23 | 0x80 | base permission type으로부터 파생된 추가적인 flag로 Marshmallow 이전 버전의 API level을 갖는 어플리케이션들에게 자동으로 부여된다. (runtime permission 부여를 지원하지 않는 버전들) |&lt;br&gt;| installer | 0x100 | base permission type으로부터 파생된 추가적인 flag로 시스템 어플리케이션 권한을 가진 어플리케이션들에게 자동으로 부여된다. |&lt;br&gt;| verifier | 0x200 | base permission type으로부터 파생된 추가적인 flag로 시스템 어플리케이션 권한을 가진 어플리케이션들에게 자동으로 부여된다. |&lt;br&gt;| preinstalled | 0x400 | base permission type으로부터 파생된 추가적인 flag로 시스템 이미지 위에 미리 설치되는 어플리케이션들(privileged 어플리케이션을 포함한)에게 자동으로 부여된다. |&lt;br&gt;| setup | 0x800 | base permission type으로부터 파생된 추가적인 flag로 setup wizard 어플리케이션에게 자동으로 부여된다. |&lt;/p&gt;
&lt;h3 id=&quot;Custom-permission-이렇게-사용하라&quot;&gt;&lt;a href=&quot;#Custom-permission-이렇게-사용하라&quot; class=&quot;headerlink&quot; title=&quot;Custom permission, 이렇게 사용하라.&quot;&gt;&lt;/a&gt;Custom permission, 이렇게 사용하라.&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;여러 어플리케이션을 묶어서 제품군을 설계할 때, 각각의 permission이 단 한번만 정의될 수 있도록 설계해야 한다.&lt;/li&gt;
&lt;li&gt;서로 다른 어플리케이션이 같은 인증서로 서명한 경우 signature check를 통해 중복으로 permission을 정의하는 것을 막을 수 있다.&lt;/li&gt;
&lt;li&gt;하나의 제품군을 개발하는 경우 이 모든 제품군의 permission을 관리하는 하나의 pacakage를 개발하는 것이 좋다. 이 package는 특별히 서비스를 제공하진 않고 permission을 관리할 뿐이며, 제품군에 속한 다른 어플리케이션들은 &lt;uses-permission&gt;만 사용하게끔 한다.&lt;/uses-permission&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;AndroidManifest-xml의-permission-제한&quot;&gt;&lt;a href=&quot;#AndroidManifest-xml의-permission-제한&quot; class=&quot;headerlink&quot; title=&quot;AndroidManifest.xml의 permission 제한&quot;&gt;&lt;/a&gt;AndroidManifest.xml의 permission 제한&lt;/h3&gt;&lt;p&gt;개발자는 AndroidManifest.xml을 통해 시스템 또는 어플리케이션의 모든 컴포넌트에 접근 제한을 걸 수 있다. 이를 위해 컴포넌트 별로 &lt;code&gt;android:permission&lt;/code&gt; 속성을 선언하고 해줘야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity permissions (&lt;activity&gt;)&lt;ul&gt;
&lt;li&gt;관련된 activity를 실행할 수 있는 권한을 나타낸다. 이 permission은 &lt;code&gt;Context.startActivity()&lt;/code&gt;와 &lt;code&gt;Activity.startActivityForResult()&lt;/code&gt; 실행 시 체크된다. 만약 호출한 측이 permission을 가지지 않았다면 &lt;code&gt;SecurityException&lt;/code&gt;이 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/activity&gt;&lt;/li&gt;
&lt;li&gt;Service permissions (&lt;service&gt;)&lt;ul&gt;
&lt;li&gt;관련된 service에 bind할 수 있는 권한을 나타낸다. 이 permission은 &lt;code&gt;Context.startService()&lt;/code&gt;, &lt;code&gt;Context.stopService()&lt;/code&gt;, &lt;code&gt;Context.bindService()&lt;/code&gt; 실행 시 체크된다. 만약 호출한 측이 permission을 가지지 않았다면 &lt;code&gt;SecurityException&lt;/code&gt;이 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/service&gt;&lt;/li&gt;
&lt;li&gt;BroadcastReceiver permissions (&lt;receiver&gt;)&lt;ul&gt;
&lt;li&gt;관련된 receiver로 broadcast를 보낼 수 있는 권한을 나타낸다. &lt;code&gt;Context.sendBroadcast()&lt;/code&gt;가 return될 때 permission 체크가 이루어지며, 시스템은 broadcast를 정해진 receiver로 전달하려 한다. Permission이 없는 경우 호출한 측으로 result가 제대로 전달되지 않고 exception이 전달된다.&lt;/li&gt;
&lt;li&gt;이 Permission은 &lt;code&gt;Context.registerReceiver&lt;/code&gt;를 통해 동적으로 등록할 수도 있다.&lt;/li&gt;
&lt;li&gt;다른 방법으로 &lt;code&gt;Context.sendBroadast()&lt;/code&gt; 호출 시 permission을 명시하여 broadcast를 수신할 수 있는 BroadcastReceiver를 제한할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/receiver&gt;&lt;/li&gt;
&lt;li&gt;ContentProvider permissions (&lt;provider&gt;)&lt;ul&gt;
&lt;li&gt;ContentProvider 내의 data에 접근하는 것을 제한할 수 있다(ContentProvider는 URI permission이라 불리는 중요한 추가 보안 기능을 가지고 있다.).&lt;/li&gt;
&lt;li&gt;다른 컴포넌트들과는 다르게 두 개의 permission attribute를 설정할 수 있다. write 권한을 가지고 있다고 해도 read할 수 없다.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android:readPermission&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android:writePermission&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;최초 provider를 찾을 때(retrieve) permission에 대해 체크하며 두 개의 permission 모두 없다면 &lt;code&gt;SecurityException&lt;/code&gt;이 발생한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContentResolver.query()&lt;/code&gt;는 &lt;code&gt;read permission&lt;/code&gt;을 요구하며, &lt;code&gt;ContentResolver.insert(), ContentResolver.update(), ContentResolver.delete()&lt;/code&gt;는 &lt;code&gt;write permission&lt;/code&gt;을 요구한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/provider&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Sending-Broadcast-시의-Permission-제한&quot;&gt;&lt;a href=&quot;#Sending-Broadcast-시의-Permission-제한&quot; class=&quot;headerlink&quot; title=&quot;Sending Broadcast 시의 Permission 제한&quot;&gt;&lt;/a&gt;Sending Broadcast 시의 Permission 제한&lt;/h3&gt;&lt;p&gt;BroadcastReceiver를 regist하는 것(&lt;code&gt;Context.registerReceiver()&lt;/code&gt;)에 더하여 broadcast를 보낼 때 필요한 permission을 지정할 수도 있다. &lt;code&gt;Context.sendBroadcast()&lt;/code&gt; 호출 시 permission string을 포함하여 보내면 해당 permission을 가지고 있는 receiver만 수신할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;receiver&lt;/code&gt;와 &lt;code&gt;broadcaster&lt;/code&gt; 모두 permission을 가지고 있어야 한다.&lt;/p&gt;
&lt;h3 id=&quot;Permission을-제한하는-다른-방법&quot;&gt;&lt;a href=&quot;#Permission을-제한하는-다른-방법&quot; class=&quot;headerlink&quot; title=&quot;Permission을 제한하는 다른 방법&quot;&gt;&lt;/a&gt;Permission을 제한하는 다른 방법&lt;/h3&gt;&lt;p&gt;다른 프로세스가 현재 프로세스의 Service 등을 호출했을 때 &lt;code&gt;Context.checkCallingPermission()&lt;/code&gt;을 사용할 수 있으며 return값인 &lt;code&gt;PERMISSION_GRANTED&lt;/code&gt;, &lt;code&gt;PERMISSION_DENIED&lt;/code&gt; 로 호출한 프로세스가 권한을 가지고 있는지 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;Permission 체크를 위한 두 가지 방법이 더 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른 프로세스의 PID(Process Identifier)를 알고있다면 &lt;code&gt;Context.checkPermission(String, int, int)&lt;/code&gt;를 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;다른 어플리케이션의 Package name을 알고있다면 &lt;code&gt;PackageManager.checkPermission(String, String)&lt;/code&gt;을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;URI-Permission&quot;&gt;&lt;a href=&quot;#URI-Permission&quot; class=&quot;headerlink&quot; title=&quot;URI Permission&quot;&gt;&lt;/a&gt;URI Permission&lt;/h2&gt;&lt;p&gt;Content provider 사용 시 &lt;code&gt;standard permission system&lt;/code&gt;에 기술된 내용은 충분하지 않다.&lt;/p&gt;
&lt;p&gt;Content provider는 직접적인 client는 물론 다른 어플리케이션이 동작하기 위한 특정한 URI를 다룰 때 read/write permission을 통해 스스로를 보호하기를 원한다.&lt;/p&gt;
&lt;p&gt;대표적인 예로, Mail 어플리케이션에서의 파일 첨부 기능을 보자. Mail로의 접근은 user-data의 보호를 위해 permission으로 막혀있다. Image 첨부 기능의 URI가 Image viewer에 제공되어 있다 하더라도, Image viewer는 permission이 없기 때문에 첨부 파일을 열 수 없다.&lt;/p&gt;
&lt;p&gt;이 문제의 해결책이 &lt;code&gt;per-URI permission&lt;/code&gt;이다. Activity가 시작되거나 result가 activity로 return될 때 Caller는 &lt;code&gt;Intent.FLAG_GRANT_READ_URI_PERMISSION&lt;/code&gt; 또는 &lt;code&gt;Intent.FLAG_GRANT_WRITE_URI_PERMISSION&lt;/code&gt;을 설정할 수 있다.&lt;/p&gt;
&lt;p&gt;이는 별도로 Content provider의 data 접근을 위한 permission을 가질 필요 없이 Intent 내의 특정 data URI를 통해 activity permission을 받겠다는 의미이다.&lt;/p&gt;
&lt;p&gt;이 동작 방식은 파일 열기, 주소록 선택 등의 사용자와의 상호 작용 발생 시 임시로 권한을 허가하는, 일반적인 capability-style 모델을 가능케 한다. 또한, 어플리케이션이 쓸데없는 permission을 갖게지 않게하는데 핵심적인 역할을 한다.&lt;/p&gt;
&lt;p&gt;URI permission의 권한 부여을 위해 해당 URI들을 가지고 있는 Content provider는 자신이 이 기능을 구현하고 있다는 것을 알리기 위해 &lt;code&gt;android:grantUriPermissions&lt;/code&gt; 속성을 선언하거나 &lt;code&gt;&amp;lt;grant-uri-permissions&amp;gt;&lt;/code&gt; tag를 선언해야 한다.&lt;/p&gt;
&lt;p&gt;아래와 같은 방식으로 Flag를 세팅할 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;startActivity(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_VIEW)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .setDataAndType(uri, type)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Permission-사용하기&quot;&gt;&lt;a href=&quot;#Permission-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Permission 사용하기&quot;&gt;&lt;/a&gt;Permission 사용하기&lt;/h2&gt;&lt;h3 id=&quot;Permission-확인&quot;&gt;&lt;a href=&quot;#Permission-확인&quot; class=&quot;headerlink&quot; title=&quot;Permission 확인&quot;&gt;&lt;/a&gt;Permission 확인&lt;/h3&gt;&lt;p&gt;어플리케이션에서 &lt;code&gt;Dangerous permission&lt;/code&gt;의 사용을 요청할 경우 사용할 때마다 permission을 얻은 상태인지 체크 해야하며,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ContextCompat.checkSelfPermission()&lt;/code&gt; 메소드를 사용하면 된다.&lt;/p&gt;
&lt;p&gt;아래는 캘린더 작성 permission에 대한 Android의 예시이다.&lt;/p&gt;
&lt;p&gt;Permission을 획득했다면 &lt;code&gt;PackageManager.PERMISSION_GRANTED&lt;/code&gt;가 return될 것이며, permission이 없다면 &lt;code&gt;PERMISSION_DENIED&lt;/code&gt;가 return될 것이다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Assume thisActivity is the current activity&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; permissionCheck = ContextCompat.checkSelfPermission(thisActivity,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Manifest.permission.WRITE_CALENDAR);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Permission-요청하기&quot;&gt;&lt;a href=&quot;#Permission-요청하기&quot; class=&quot;headerlink&quot; title=&quot;Permission 요청하기&quot;&gt;&lt;/a&gt;Permission 요청하기&lt;/h3&gt;&lt;p&gt;사용자가 한 번 거부한 permission에 대해서는 설명을 추가(ex. Don’t ask again 체크박스)해야 하는데 한 번 거부한 permission인지 알 수 있는 방법은 &lt;code&gt;shouldShowRequestPremissionRationale()&lt;/code&gt; 메소드를 사용하는 것이다. 만약 이전에 사용자가 DENY처리한 적이 있다면 true가 return된다.&lt;/p&gt;
&lt;p&gt;어플리케이션이 permission을 아직 안 가지고 있을 경우 &lt;code&gt;requestPremissions()&lt;/code&gt;를 호출해야 한다. &lt;/p&gt;
&lt;p&gt;아래 코드는 &lt;code&gt;READ_CONTACTS&lt;/code&gt; 기능에 대해 permission을 가지고 있는지 확인하며, permission이 없다면 요청한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Here, thisActivity is the current activity&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ContextCompat.checkSelfPermission(thisActivity,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                Manifest.permission.READ_CONTACTS)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        != PackageManager.PERMISSION_GRANTED) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Should we show an explanation?&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Manifest.permission.READ_CONTACTS)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Show an expanation to the user *asynchronously* -- don&#39;t block&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// this thread waiting for the user&#39;s response! After the user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// sees the explanation, try again to request the permission.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// No explanation needed, we can request the permission.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ActivityCompat.requestPermissions(thisActivity,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String[]&amp;#123;Manifest.permission.READ_CONTACTS&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                MY_PERMISSIONS_REQUEST_READ_CONTACTS);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// app-defined int constant. The callback method gets the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// result of the request.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Permission-request-response&quot;&gt;&lt;a href=&quot;#Permission-request-response&quot; class=&quot;headerlink&quot; title=&quot;Permission request response&quot;&gt;&lt;/a&gt;Permission request response&lt;/h3&gt;&lt;p&gt;Permission을 사용자에게 요청 시 dialog box를 보여주게 된다. 사용자가 allow/deny를 입력하면 시스템은 어플리케이션의 &lt;code&gt;onRequestPermissionsResult()&lt;/code&gt; 메소드를 호출한다.&lt;/p&gt;
&lt;p&gt;어플리케이션에서 보낸 &lt;code&gt;requestPermission()&lt;/code&gt;에 대해 동일한 request code가 도착하는지 확인하기 위해 callback 함수인 &lt;code&gt;onRequestPermissionResult()&lt;/code&gt;를 override 해야한다.&lt;/p&gt;
&lt;p&gt;아래 예시는 &lt;code&gt;READ_CONTACTS&lt;/code&gt; 권한을 요청하고 callback 받는 것이다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; requestCode,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String permissions[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] grantResults) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (requestCode) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MY_PERMISSIONS_REQUEST_READ_CONTACTS: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// If request is cancelled, the result arrays are empty.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (grantResults.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; grantResults[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == PackageManager.PERMISSION_GRANTED) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// permission was granted, yay! Do the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// contacts-related task you need to do.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// permission denied, boo! Disable the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// functionality that depends on this permission.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// other &#39;case&#39; lines to check for other&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// permissions this app might request&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Permission-잘-사용하기&quot;&gt;&lt;a href=&quot;#Permission-잘-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Permission 잘 사용하기&quot;&gt;&lt;/a&gt;Permission 잘 사용하기&lt;/h3&gt;&lt;h4 id=&quot;Intent의-사용을-고려하라&quot;&gt;&lt;a href=&quot;#Intent의-사용을-고려하라&quot; class=&quot;headerlink&quot; title=&quot;Intent의 사용을 고려하라&quot;&gt;&lt;/a&gt;Intent의 사용을 고려하라&lt;/h4&gt;&lt;p&gt;App에서 task를 수행하기 위한 방법은 크게 두 가지가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App이 task를 스스로 수행하게 하는 것&lt;/li&gt;
&lt;li&gt;Intent를 던져서 다른 어플리케이션이 task를 수행하게 하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사진을 찍고 싶으면 CAMERA permission을 요청하여 카메라 제어와 관련된 모든 permission을 가지고 올 수 있다. 하지만 ACTION_IMAGE_CAPTURE intent를 날려서 사진을 찍을 수도 있다.&lt;/p&gt;
&lt;p&gt;이 intent를 던지면 카메라 app을 설정하라는 dialog가 발생한다. 만약 default app으로 설정된게 있으면 안 뜬다. 사용자가 사진을 찍고 나면 &lt;code&gt;onActivityResult()&lt;/code&gt;를 통해 사진을 callback받을 수 있다.&lt;/p&gt;
&lt;p&gt;이 두 가지 방법은 이 세상 이치가 그렇듯 각각의 장단점이 있었으니…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permission 사용 시&lt;ul&gt;
&lt;li&gt;App이 모든 제어권을 갖지만 그에 따른 모든 UI를 설계해야 하기 때문에 App이 복잡해진다.&lt;/li&gt;
&lt;li&gt;한 번 permission을 받으면 계속 사용할 수 있지만 사용자가 permission 획득을 거부한다면 어플리케이션은 무용지물이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intent 사용 시 &lt;ul&gt;
&lt;li&gt;수행 동작들에 대한 UI를 구성할 필요가 없으며 intent를 처리하는 어플리케이션이 준비한 UI를 사용한다. 하지만 이는 곧 UX를 제공할 수 없다는 말이 된다.&lt;/li&gt;
&lt;li&gt;사용자가 default app을 지정하지 않았다면 system은 app을 고르는 화면을 보여줄 것이다. 사용자가 default handler를 지정하지 않으면 동작이 수행될 때마다 dialog를 띄워줄 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;꼭-필요한-permission만-요청하라&quot;&gt;&lt;a href=&quot;#꼭-필요한-permission만-요청하라&quot; class=&quot;headerlink&quot; title=&quot;꼭 필요한 permission만 요청하라&quot;&gt;&lt;/a&gt;꼭 필요한 permission만 요청하라&lt;/h4&gt;&lt;p&gt;Android 6.0 이상의 버전에서는 permission이 필요한 기능을 새로 수행할 때마다 사용자에게 수행할 것인지 묻는다. 사용자 입장에서 여러가지 기능에 대해 자꾸 물어보면 짜증나니까 꼭 필요한 permission만 사용하고 요청하도록 한다.&lt;/p&gt;
&lt;p&gt;어플리케이션의 core가 되는 기능이 아니라면 왠만하면 intent를 던져서 사용하자.&lt;/p&gt;
&lt;h4 id=&quot;쓸데없이-permission을-많이-가져가지-말아라&quot;&gt;&lt;a href=&quot;#쓸데없이-permission을-많이-가져가지-말아라&quot; class=&quot;headerlink&quot; title=&quot;쓸데없이 permission을 많이 가져가지 말아라&quot;&gt;&lt;/a&gt;쓸데없이 permission을 많이 가져가지 말아라&lt;/h4&gt;&lt;p&gt;한 번에 너무 많은 permission을 요청할 경우, 어플리케이션이 종료될 수도 있다.&lt;/p&gt;
&lt;p&gt;어플리케이션 구동에 있어서 꼭 필요한 permission은 어플리케이션이 처음 실행될 때 획득할 수 있게 처리하는 것이 좋다.&lt;/p&gt;
&lt;p&gt;예를 들어, 사진 어플리케이션이 처음 구동될 때 카메라 제어에 대한 permission을 받는 것이 좋지만 &lt;code&gt;READ_CONTACTS&lt;/code&gt;등의 permission은 주소록을 통한 공유 등 그 기능이 처음 수행될 때 받는 것이 좋다는 이야기이다.&lt;/p&gt;
&lt;h4 id=&quot;그-Permission이-왜-필요한지-사용자에게-설명하라&quot;&gt;&lt;a href=&quot;#그-Permission이-왜-필요한지-사용자에게-설명하라&quot; class=&quot;headerlink&quot; title=&quot;그 Permission이 왜 필요한지 사용자에게 설명하라&quot;&gt;&lt;/a&gt;그 Permission이 왜 필요한지 사용자에게 설명하라&lt;/h4&gt;&lt;p&gt;&lt;code&gt;requestPermissions()&lt;/code&gt;를 호출하면 permission dialog가 뜬다. 하지만 왜 이 permission을 획득해야 하는지는 알려주지 않는다. Permission을 요청하면 사용자는 왜 이 permission이 필요한지 궁금해진다.&lt;/p&gt;
&lt;p&gt;예를 들어, 사진 어플리케이션이 geotag를 위해 location service를 필요로 할 때, 무턱대고 location permission을 요청하면 사용자들은 의아하게 생각한다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;code&gt;requestPermissions()&lt;/code&gt;를 호출하기 전에 사용자에게 설명해줄 필요가 있다.&lt;/p&gt;
&lt;p&gt;사용자에게 알려주는 방법 중 하나는 &lt;code&gt;app tutorial&lt;/code&gt;을 넣는 것이다. Demo를 보여줌으로써 사용자가 이 permission이 왜 필요한지 느낄 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;Permission에-대해-test하는-방법&quot;&gt;&lt;a href=&quot;#Permission에-대해-test하는-방법&quot; class=&quot;headerlink&quot; title=&quot;Permission에 대해 test하는 방법&quot;&gt;&lt;/a&gt;Permission에 대해 test하는 방법&lt;/h4&gt;&lt;p&gt;API level 23 이상의 단말에서는 아래 방법으로 permission과 관련된 문제 있는 코드를 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션의 현재 permission 및 관련 경로를 확인한다.&lt;/li&gt;
&lt;li&gt;Permission이 필요한 service를 수행하거나 data에 접근을 시도한다.&lt;/li&gt;
&lt;li&gt;여러가지 permission을 얻었다 잃었다 하면서 테스트한다. 예를 들어, 카메라 어플리케이션은 &lt;code&gt;CAMERA&lt;/code&gt;, &lt;code&gt;READ_CONTACTS&lt;/code&gt;, &lt;code&gt;ACCESS_FINE_LOCATION&lt;/code&gt;이 필요하다고 할 때, 이 세 가지를 껐다 켰다 하면서 테스트를 진행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ADB를-통해-다음-항목들을-시험해볼-수-있다&quot;&gt;&lt;a href=&quot;#ADB를-통해-다음-항목들을-시험해볼-수-있다&quot; class=&quot;headerlink&quot; title=&quot;ADB를 통해 다음 항목들을 시험해볼 수 있다.&quot;&gt;&lt;/a&gt;&lt;code&gt;ADB&lt;/code&gt;를 통해 다음 항목들을 시험해볼 수 있다.&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Permission list를 확인하는 방법&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ adb shell pm list permissions -d -g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;permission을 획득/제거하는 방법&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ adb shell pm [grant|revoke] &amp;lt;permission-name&amp;gt; ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/10/2016-07-10-android-permission/#disqus_thread</comments>
    </item>
    
    <item>
      <title>OSI 7 layer and TCP/IP model</title>
      <link>http://lazyrodi.github.io/2016/07/04/2016-07-04-osi7-and-tcpip/</link>
      <guid>http://lazyrodi.github.io/2016/07/04/2016-07-04-osi7-and-tcpip/</guid>
      <pubDate>Mon, 04 Jul 2016 06:47:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;del&gt;10년이 넘도록 외워지지 않는 Network 기초…&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;OSI-7-layer&quot;&gt;&lt;a href=&quot;#OSI-7-layer&quot; class=&quot;headerlink&quot; title=&quot;OSI 7 layer&quot;&gt;&lt;/a&gt;OSI 7 
      
      </description>
      
      <content:encoded>&lt;p&gt;&lt;del&gt;10년이 넘도록 외워지지 않는 Network 기초…&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;OSI-7-layer&quot;&gt;&lt;a href=&quot;#OSI-7-layer&quot; class=&quot;headerlink&quot; title=&quot;OSI 7 layer&quot;&gt;&lt;/a&gt;OSI 7 layer&lt;/h2&gt;&lt;p&gt;OSI (Open System Interconnection) 7 Layer 는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network Communication 시 발생하는 충돌들을 완화하기 위해 ISO에서 표준화된 Network 구조로 제시한 기본 모델이다.&lt;/li&gt;
&lt;li&gt;ISO/IEC 7498 Spec.&lt;ul&gt;
&lt;li&gt;ISO/IEC 7498-1: The Basic Model&lt;/li&gt;
&lt;li&gt;ISO 7498-2: Security Architecture&lt;/li&gt;
&lt;li&gt;ISO/IEC 7498-3: Naming and addressing&lt;/li&gt;
&lt;li&gt;ISO/IEC 7498-4: Management framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;[7] 응용 계층 (Application)&lt;ul&gt;
&lt;li&gt;Application Software에 API 제공&lt;/li&gt;
&lt;li&gt;Data type: Message&lt;/li&gt;
&lt;li&gt;Equipment: L7 ~ L5 Switch, Gateway (IP + TCP / UDP + Packet)&lt;/li&gt;
&lt;li&gt;Protocol: DNS, SNMP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[6] 표현 계층 (Presentation)&lt;ul&gt;
&lt;li&gt;Network Security (번역기 역할)&lt;/li&gt;
&lt;li&gt;암호화, 압축, 변환&lt;/li&gt;
&lt;li&gt;Data type: Message&lt;/li&gt;
&lt;li&gt;Equipment: L7 ~ L5 Switch, Gateway (IP + TCP / UDP + Packet)&lt;/li&gt;
&lt;li&gt;Protocol: MPEG, JPG, MIME&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[5] 세션 계층 (Session)&lt;ul&gt;
&lt;li&gt;Socket Program&lt;/li&gt;
&lt;li&gt;동기화, 통신 선로 구축 및 유지&lt;/li&gt;
&lt;li&gt;Session 연결, 관리, 종료&lt;/li&gt;
&lt;li&gt;Data type: Message&lt;/li&gt;
&lt;li&gt;Equipment: L7 ~ L5 Switch, Gateway (IP + TCP/UDP + Packet)&lt;/li&gt;
&lt;li&gt;Protocol: 전송 모드 결정 (반이중, 전이중, 직렬, 병렬, 동기, 비동기) RTP (Real-time Transport Protocol)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[4] 전송 계층 (Transport)&lt;ul&gt;
&lt;li&gt;데이터 전송 보장&lt;/li&gt;
&lt;li&gt;흐름 제어 (정지 대기, 슬라이드)&lt;/li&gt;
&lt;li&gt;QoS (Quality of Service)&lt;/li&gt;
&lt;li&gt;Data type: Segment&lt;/li&gt;
&lt;li&gt;Equipment: L4 Switch (IP+TCP/UDP, Load balancing)&lt;/li&gt;
&lt;li&gt;Protocol: TCP, UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[3] 네트워크 계층 (Network)&lt;ul&gt;
&lt;li&gt;통신 경로 설정 (Routing): 중계 기능 담당, 교환&lt;/li&gt;
&lt;li&gt;혼잡 제어&lt;/li&gt;
&lt;li&gt;IPv4, IPv6&lt;/li&gt;
&lt;li&gt;Data type: Packet&lt;/li&gt;
&lt;li&gt;Equipment: L3 Switch (IP 주소 참조), Router (유선, 무선)&lt;/li&gt;
&lt;li&gt;Protocol: IP, ARP, RARP, 회선 교환, 패킷 교환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[2] 데이터 링크 계층 (Datalink)&lt;ul&gt;
&lt;li&gt;오류 제어, Frame 형식 정의 및 생성, MAC 제어&lt;/li&gt;
&lt;li&gt;에러 검출 및 정정, 흐름 제어&lt;/li&gt;
&lt;li&gt;Data type: Frame&lt;/li&gt;
&lt;li&gt;Equipment: L2 Switch&lt;ul&gt;
&lt;li&gt;MAC 주소 참조&lt;/li&gt;
&lt;li&gt;Bridge (segment)&lt;/li&gt;
&lt;li&gt;Switch (frame)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol: FEC, ARQ, H-ARG, 해밍코드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[1] 물리 계층 (Physical)&lt;ul&gt;
&lt;li&gt;물리적 연결 설정, 해제&lt;/li&gt;
&lt;li&gt;Data 코딩, 변조 방식 (AM, FM, PM)&lt;/li&gt;
&lt;li&gt;Data 부호화 방식 (ASK, FSK, PSK)&lt;/li&gt;
&lt;li&gt;Multiplexing (TDM, FDM)&lt;/li&gt;
&lt;li&gt;Data 전송 속도 (bps, Baud)&lt;/li&gt;
&lt;li&gt;Data type: Bit stream&lt;/li&gt;
&lt;li&gt;Equipment: Repeater/Hub&lt;/li&gt;
&lt;li&gt;Protocol: 전기적 신호, 절차적 규격, 맨체스터 코드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;OSI 7 Layer가 적용된 Protocol들에는 다음과 같은 것들이 있음.&lt;ul&gt;
&lt;li&gt;Bluetooth&lt;/li&gt;
&lt;li&gt;USB&lt;/li&gt;
&lt;li&gt;SATA&lt;/li&gt;
&lt;li&gt;PCI-E&lt;/li&gt;
&lt;li&gt;Zigbee&lt;/li&gt;
&lt;li&gt;Thunderbolt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;인터넷에 떠다니는 그림인데 원래 출처를 모르겠습니다. 문제가 되면 삭제하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-04-network-osi7-and-tcpip-001.jpg&quot; alt=&quot;osi7layer&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h2&gt;&lt;p&gt;위 그림에서 보듯 TCP/IP는 OSI 7 Layer 대신 4개의 Layer로 정의해 둔 것이다.&lt;/p&gt;
&lt;p&gt;Network를 상호 연결시켜 정보를 전송하는 기능을 가진 여러 개의 Protocol을 집합으로 묶어둔 것이 특징이다.&lt;/p&gt;
&lt;p&gt;TCP/IP 각각의 Protocol이 하는 기능은 다음과 같다.&lt;/p&gt;
&lt;p&gt;| 구분     | 기능   | Protocol | Description |&lt;br&gt;| 응용계층 | FTP    | FTP      | 파일 전송 프로토콜 |&lt;br&gt;|          |        | TFTP     | 소형 파일 전송 Protocol |&lt;br&gt;|          | E-mail | SMTP     | 메일 서버 간의 메일 송수신 |&lt;br&gt;|          |        | POP3     | 메일 클라이언트와 메일 서버 간의 메일 송수신 |&lt;br&gt;|          |        | IMAP4    | POP3의 단점을 보완함 (원격 서버의 계층 구조를 유지한다.) |&lt;br&gt;|          | Telnet | Telnet   | 다른 시스템으로 로그인하는 기능 |&lt;br&gt;|          | 인터넷 | HTTP     | Web service protocol |&lt;br&gt;|          |        | SNMP     | 데이터 흐름 정보 (네트워크 및 Host 상태 모니터링) |&lt;br&gt;|          |        | DNS      | Host 이름에 대한 IP 주소 통보기능 |&lt;br&gt;|          |        | NFS      | SUN에서 개발한 분산형 파일 시스템 |&lt;br&gt;| 전송계층 | End-to-End Data 전송 | TCP       | 연결 지향 Protocol |&lt;br&gt;|          |                      | UDP       | 비연결 지향 Protocol |&lt;br&gt;|          |                      | SCTP      | 신뢰성 제공 (UDP+TCP), 4Way handshaking 사용 |&lt;br&gt;| 인터넷계층 | OSI의 Network 계층 | IP | 목적지까지 패킷 전달 (IPv4, IPv6) |&lt;br&gt;|            | Routing (경로 설정) | IPx | PC용 Network, 경로 선택, 패킷 처리 |&lt;br&gt;|            | Gateway (Network 간 Data 연결) | ARP | 논리 주소 IP로 물리 주소 IP(MAC)를 탐색  |&lt;br&gt;|            |                                | RARP | 물리 주소 IP로 논리 주소 IP를 탐색 |&lt;br&gt;|            |                                | BOOTB | 디스크 없는 시스템 부팅 시 사용 |&lt;br&gt;|            |                                | DHCP | 임시 IP 주소 할당 기술 |&lt;br&gt;|            |                                | ICMP | IP 계층 이용 Message 교환 (ping) |&lt;br&gt;|            |                                | IGMP | 인터넷 그룹 관리, Multicast 그룹을 router에게 통보 |&lt;br&gt;| 링크계층   | 기존 표준 기술 지원 | Etehrenet | 기존의 모든 표준 Protocol과 기술적 호환성 유지 |&lt;br&gt;|            |                     | X.25      | |&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Systems_Interconnection&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OSI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OSI model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;정보관리기술사 &amp;amp; 컴퓨터시스템응용기술사 - 성안당&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/04/2016-07-04-osi7-and-tcpip/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jekyll에 Disqus 적용하기</title>
      <link>http://lazyrodi.github.io/2016/07/04/2016-07-04-etc-disqus/</link>
      <guid>http://lazyrodi.github.io/2016/07/04/2016-07-04-etc-disqus/</guid>
      <pubDate>Mon, 04 Jul 2016 04:47:50 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;이 문서는 Jekyll 시절에 작성한 것으로 현재 이 사이트에서 유효하지 않음.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://disqus.com&quot; target=&quot;_blank&quot; rel=&quot;external
      
      </description>
      
      <content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 문서는 Jekyll 시절에 작성한 것으로 현재 이 사이트에서 유효하지 않음.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://disqus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disqus&lt;/a&gt;는 각종 Framwork을 이용한 웹사이트에 Comment를 달게 해주는 서비스이다.&lt;/p&gt;
&lt;p&gt;사용자는 Disqus, Facebook, Twitter, Google 계정을 이용하여 comment를 남길 수 있다.&lt;/p&gt;
&lt;p&gt;지원하는 Framework 이랄까 Platform이랄까…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Universal Code&lt;/li&gt;
&lt;li&gt;Wordpress&lt;/li&gt;
&lt;li&gt;Blogger&lt;/li&gt;
&lt;li&gt;Tumblr&lt;/li&gt;
&lt;li&gt;Squarespace&lt;/li&gt;
&lt;li&gt;TypePad&lt;/li&gt;
&lt;li&gt;MovableType&lt;/li&gt;
&lt;li&gt;Drupal&lt;/li&gt;
&lt;li&gt;Joomla&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;목표&quot;&gt;&lt;a href=&quot;#목표&quot; class=&quot;headerlink&quot; title=&quot;목표&quot;&gt;&lt;/a&gt;목표&lt;/h2&gt;&lt;p&gt;github.io에 [Jekyll][Jekyll]을 이용해서 Static page들로 운영(?)을 하고 있는데, 각 post에 comment를 달아보려 한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-Disqus-가입&quot;&gt;&lt;a href=&quot;#1-Disqus-가입&quot; class=&quot;headerlink&quot; title=&quot;1. Disqus 가입&quot;&gt;&lt;/a&gt;1. Disqus 가입&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://disqus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disqus&lt;/a&gt; 에 가입한다.&lt;/p&gt;
&lt;p&gt;가입 과정에 &lt;code&gt;Installation&lt;/code&gt;이 있다. &lt;code&gt;Universal Code&lt;/code&gt;를 선택한다.&lt;/p&gt;
&lt;h3 id=&quot;2-Jekyll에-적용&quot;&gt;&lt;a href=&quot;#2-Jekyll에-적용&quot; class=&quot;headerlink&quot; title=&quot;2. Jekyll에 적용&quot;&gt;&lt;/a&gt;2. Jekyll에 적용&lt;/h3&gt;&lt;p&gt;이후 &lt;code&gt;/layouts/post.html&lt;/code&gt; 의 하단에 Disqus에서 제공하는 소스를 넣으면 끝난다. 너무 빨리 끝나서 놀랐다. (…)&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var disqus_config = function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.page.url = PAGE_URL;  // Replace PAGE_URL with your page&#39;s canonical URL variable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (function() &amp;#123;  // DON&#39;T EDIT BELOW THIS LINE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var d = document, s = d.createElement(&#39;script&#39;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        s.src = &#39;//lazyrodi.disqus.com/embed.js&#39;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        s.setAttribute(&#39;data-timestamp&#39;, +new Date());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        (d.head || d.body).appendChild(s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://disqus.com/?ref_noscript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;nofollow&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;this.page.url&lt;/code&gt;과 &lt;code&gt;this.page.identifier&lt;/code&gt;는 Disqus thread가 중복되어 생성되는 것을 방지하기 위해 설정하는데 다음과 같이 하면 된다. url에는 본인의 것을 넣으면 된다.&lt;/p&gt;
&lt;p&gt;아래 &lt;code&gt;\&lt;/code&gt;는 코드가 반영되어 버려서 어쩔 수 없이 넣었다. 실제 소스에 반영할 땐 제거할 것.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;this.page.url = &quot;http://lazyrodi.github.io\&amp;#123;\&amp;#123; page.url &amp;#125;&amp;#125;&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;this.page.identifier = &quot;\&amp;#123;\&amp;#123; page.url &amp;#125;&amp;#125;&quot;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-Comment-count-표시하기&quot;&gt;&lt;a href=&quot;#3-Comment-count-표시하기&quot; class=&quot;headerlink&quot; title=&quot;3. Comment count 표시하기&quot;&gt;&lt;/a&gt;3. Comment count 표시하기&lt;/h3&gt;&lt;p&gt;thread 별로 달린 comment의 개수를 확인하여 post list나 각 post의 상단 등에 표시하기 위해서는 아래의 과정이 필요하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 전에 아래 코드 추가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default.html&lt;/code&gt; 에서 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 전에 아래 코드를 넣는다.&lt;/li&gt;
&lt;li&gt;원래 의도대로면 count를 표시하고 싶은 page에만 넣으면 된다.&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dsq-count-scr&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//lazyrodi.disqus.com/count.js&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;count를 표시하기 원하는 page에 아래 코드를 넣는다.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- post.html --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;\&amp;#123;\&amp;#123; page.url &amp;#125;&amp;#125;index.html#disqus_thread&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-disqus-identifier&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;\&amp;#123;\&amp;#123; page.url &amp;#125;&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;\&amp;#123;\&amp;#123; post.url &amp;#125;&amp;#125;index.html#disqus_thread&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-disqus-identifier&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;\&amp;#123;\&amp;#123; post.url &amp;#125;&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;주절주절&quot;&gt;&lt;a href=&quot;#주절주절&quot; class=&quot;headerlink&quot; title=&quot;주절주절&quot;&gt;&lt;/a&gt;주절주절&lt;/h2&gt;&lt;p&gt;local에서만 발생하는 이슈인지는 모르겠지만 Disqus 서버와의 동기화 속도가 조금 느린 것 같다.&lt;/p&gt;
&lt;p&gt;comment를 달았다가 삭제하면 한참 1 comment 상태로 남아있다.&lt;/p&gt;
&lt;p&gt;comment를 한 번 달아야 thread가 생성되어 그 전에는 0 comment 표시가 되지 않는 문제(?)가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지를 JavaScript로 억지로 구현해 두었는데 refresh 문제인지 그쪽엔 html code까지는 같은데 반영이 안 된다. ㅠㅠ&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/04/2016-07-04-etc-disqus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Java] Queue</title>
      <link>http://lazyrodi.github.io/2016/07/03/2016-07-03-java-queue/</link>
      <guid>http://lazyrodi.github.io/2016/07/03/2016-07-03-java-queue/</guid>
      <pubDate>Sun, 03 Jul 2016 04:47:50 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Queue의-종류&quot;&gt;&lt;a href=&quot;#Queue의-종류&quot; class=&quot;headerlink&quot; title=&quot;Queue의 종류&quot;&gt;&lt;/a&gt;Queue의 종류&lt;/h2&gt;&lt;p&gt;Queue는 공통적으로 &lt;code&gt;Front&lt;/code&gt;, &lt;code&gt;Rea
      
      </description>
      
      <content:encoded>&lt;h2 id=&quot;Queue의-종류&quot;&gt;&lt;a href=&quot;#Queue의-종류&quot; class=&quot;headerlink&quot; title=&quot;Queue의 종류&quot;&gt;&lt;/a&gt;Queue의 종류&lt;/h2&gt;&lt;p&gt;Queue는 공통적으로 &lt;code&gt;Front&lt;/code&gt;, &lt;code&gt;Rear&lt;/code&gt; 두 개의 pointer를 갖는다.&lt;/p&gt;
&lt;p&gt;Queue는 &lt;code&gt;Array&lt;/code&gt;나 &lt;code&gt;Linked List&lt;/code&gt;를 사용하여 구현한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple or linear Queue&lt;ul&gt;
&lt;li&gt;일반적으로 &lt;code&gt;Linked-list&lt;/code&gt;로 구현된다. &lt;code&gt;FIFO(First In First Out)&lt;/code&gt;의 기본을 기킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Circular Queue&lt;ul&gt;
&lt;li&gt;말 그대로 &lt;code&gt;head&lt;/code&gt;와 &lt;code&gt;rear&lt;/code&gt;가 이어져있는 구조.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Priority Queue&lt;ul&gt;
&lt;li&gt;각 개체(node, item, etc.)가 &lt;code&gt;Priority&lt;/code&gt;를 가지고 있어서 First in은 성립하지만 &lt;code&gt;Priority&lt;/code&gt;가 높은 녀석이 먼저 나오게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dequeue&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Double-Ended Queue&lt;/code&gt;를 의미하며 front (head) 쪽과 back (tail) 쪽 모두에서 추가/삭제될 수 있는 구조를 말한다.&lt;br&gt;&lt;code&gt;Head-tail linked list&lt;/code&gt; 라고도 불리운다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;java-util-Queue&quot;&gt;&lt;a href=&quot;#java-util-Queue&quot; class=&quot;headerlink&quot; title=&quot;java.util.Queue&quot;&gt;&lt;/a&gt;java.util.Queue&lt;/h2&gt;&lt;p&gt;Java에서는 기본적으로 &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Queue&lt;/a&gt;를 지원한다. (실제로 이걸 사용한 코드는 적어도 회사에서는 본 적 없다.)&lt;/p&gt;
&lt;p&gt;이 Queue는 &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Collections Framework&lt;/a&gt;에 속한 interface로 세부 내용들은 구현 해주어야 한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Collections Framework&lt;/a&gt;에 속한 interface들은 다음과 같은 것들이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.util.Collection에 속한 것들&lt;ul&gt;
&lt;li&gt;java.util.Set&lt;/li&gt;
&lt;li&gt;java.util.SortedSet&lt;/li&gt;
&lt;li&gt;java.util.NavigableSet&lt;/li&gt;
&lt;li&gt;java.util.Queue&lt;/li&gt;
&lt;li&gt;java.util.concurrent.BlockingQueue&lt;/li&gt;
&lt;li&gt;java.util.concurrent.TransferQueue&lt;/li&gt;
&lt;li&gt;java.util.Degue&lt;/li&gt;
&lt;li&gt;java.util.concurrent.BlockingDegue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;java.util.Map에 속한 것들&lt;ul&gt;
&lt;li&gt;java.util.SortedMap&lt;/li&gt;
&lt;li&gt;java.util.NavigableMap&lt;/li&gt;
&lt;li&gt;java.util.concurrent.ConcurrentMap&lt;/li&gt;
&lt;li&gt;java.util.concurrent.ConcurrentNavigableMap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이걸 바로 사용하기 위해서는 아래와 같은 방식으로 사용 용도에 맞게 초기화 해주어야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Queue&amp;lt;Integer&amp;gt; aQueue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Queue&amp;lt;Integer&amp;gt; bQueue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PriorityQueue&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Queue&amp;lt;Integer&amp;gt; cQueue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Queue&amp;lt;Integer&amp;gt; dQueue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayBlockingQueue(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Queue&amp;lt;Integer&amp;gt; eQueue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PriorityBlockingQueue&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;해보자&quot;&gt;&lt;a href=&quot;#해보자&quot; class=&quot;headerlink&quot; title=&quot;해보자&quot;&gt;&lt;/a&gt;해보자&lt;/h2&gt;&lt;p&gt;기본적인 &lt;code&gt;add&lt;/code&gt; (혹은 push)와 &lt;code&gt;poll&lt;/code&gt; (혹은 pop)을 Linked List로 구현해보자.&lt;/p&gt;
&lt;h3 id=&quot;Node&quot;&gt;&lt;a href=&quot;#Node&quot; class=&quot;headerlink&quot; title=&quot;Node&quot;&gt;&lt;/a&gt;Node&lt;/h3&gt;&lt;p&gt;사용할 Node를 만든다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; T item;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node&amp;lt;T&amp;gt; next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node(T item) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.item = item;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Queue&quot;&gt;&lt;a href=&quot;#Queue&quot; class=&quot;headerlink&quot; title=&quot;Queue&quot;&gt;&lt;/a&gt;Queue&lt;/h3&gt;&lt;p&gt;Node를 이용한 Queue를 생성한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyQueue&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node&amp;lt;T&amp;gt; head;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Node&amp;lt;T&amp;gt; rear;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MyQueue() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        head = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rear = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T item)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (head == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            head = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node&amp;lt;T&amp;gt;(item);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            rear = head;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Node&amp;lt;T&amp;gt; newNode = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Node&amp;lt;T&amp;gt;(item);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            rear.next = newNode;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            rear = newNode;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Node&amp;lt;T&amp;gt; tmp = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        T ret = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ret = (head != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) ? head.getItem() : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (head == rear) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            head = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            tmp = head;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            head = head.next;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            tmp = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Use&quot;&gt;&lt;a href=&quot;#Use&quot; class=&quot;headerlink&quot; title=&quot;Use&quot;&gt;&lt;/a&gt;Use&lt;/h3&gt;&lt;p&gt;그리고 사용하자. 아래 예시에서는 3개를 넣고 4개를 빼기 때문에 &lt;code&gt;NullPointerException&lt;/code&gt;이 발생한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        MyQueue&amp;lt;Integer&amp;gt; mQueue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyQueue&amp;lt;Integer&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mQueue.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mQueue.add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mQueue.add(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(mQueue.poll());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(mQueue.poll());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(mQueue.poll());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(mQueue.poll());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (NullPointerException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;null&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;아래의 글들을 교재삼아 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://krishneshsingh.blogspot.kr/p/what-is-queue-explain-types-of-queue.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://krishneshsingh.blogspot.kr/p/what-is-queue-explain-types-of-queue.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javadoc-queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javadoc-collection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/03/2016-07-03-java-queue/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Regular Expression (정규표현식)</title>
      <link>http://lazyrodi.github.io/2016/07/02/2016-07-02-etc-regular-expression/</link>
      <guid>http://lazyrodi.github.io/2016/07/02/2016-07-02-etc-regular-expression/</guid>
      <pubDate>Sat, 02 Jul 2016 14:02:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;Regular Expression(정규 표현식)은 줄여서 &lt;code&gt;REGEX(레젝스)&lt;/code&gt; 라고 부르기도 한다.&lt;/p&gt;
&lt;p&gt;특정한 패턴의 문자열을 &lt;code&gt;검색&lt;/code&gt;하고 필요하면 &lt;code&gt;편집&lt;/code&gt;하기 위해 사용한다.
      
      </description>
      
      <content:encoded>&lt;p&gt;Regular Expression(정규 표현식)은 줄여서 &lt;code&gt;REGEX(레젝스)&lt;/code&gt; 라고 부르기도 한다.&lt;/p&gt;
&lt;p&gt;특정한 패턴의 문자열을 &lt;code&gt;검색&lt;/code&gt;하고 필요하면 &lt;code&gt;편집&lt;/code&gt;하기 위해 사용한다.&lt;/p&gt;
&lt;p&gt;정규 표현식은 다음과 같이 분류할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POSIX Regular Expression (UNIX 계열 표준 정규 표현식)&lt;ul&gt;
&lt;li&gt;BRE (Basic Regular Expression)&lt;/li&gt;
&lt;li&gt;ERE (Extended Regular Expression)&lt;ul&gt;
&lt;li&gt;BRE에 추가적인 메타 문자 등을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCRE (Perl Compatible Regular Expression)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt; 등의 메타 문자는 &lt;code&gt;ERE&lt;/code&gt;에서만 사용 가능하다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Meta-character-메타-문자-a-k-a-Wild-card-character&quot;&gt;&lt;a href=&quot;#Meta-character-메타-문자-a-k-a-Wild-card-character&quot; class=&quot;headerlink&quot; title=&quot;Meta character (메타 문자) a.k.a Wild card character&quot;&gt;&lt;/a&gt;Meta character (메타 문자) a.k.a Wild card character&lt;/h2&gt;&lt;p&gt;IT용어사전에서 정의하고 있는 메타 문자의 사전적인 의미는 다음과 같다.&lt;/p&gt;
&lt;p&gt;정규 표현식에서의 메타 문자는 &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;다른 문자의 정보를 운반하기 위해 프로그램 소스나 데이터에 끼워 넣는 문자.&lt;/p&gt;
&lt;p&gt;예를 들면 C언어 프로그램에 사용된 백슬레시가 그 예인데, 이 문자 다음에 오는 문장은 확장 문자열(escape sequence)에 속하는 부분으로서 주변 장치와 프로그램에 대해서 어떤 명령을 수행하도록 하는 제어 문자로 사용된다.&lt;br&gt;[네이버 지식백과]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;메타 문자&lt;/th&gt;&lt;th&gt;설  명&lt;/th&gt;&lt;th&gt;비  고&lt;/th&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;.&lt;/td&gt;&lt;td&gt;모든 문자&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;|&lt;/td&gt;&lt;td&gt;왼쪽 또는 오른쪽과 일치&lt;/td&gt;&lt;td&gt;cat|dog&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;[]&lt;/td&gt;&lt;td&gt;문자 집합 중 하나와 일치&lt;/td&gt;&lt;td&gt;[a-z]면 a-z 중 하나&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;[^]&lt;/td&gt;&lt;td&gt;문자 집합을 제외하고 일치&lt;/td&gt;&lt;td&gt;[^a-z]면 a-z가 아닌 것 중 하나&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;문자가 0개 이상 반복될 때&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;문자가 1개 이상 반복될 때&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;{n}&lt;/td&gt;&lt;td&gt;문자가 n번 반복될 때&lt;/td&gt;&lt;td&gt;a{3}&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;{m, n}&lt;/td&gt;&lt;td&gt;문자가 m번 이상 n번 이하 반복될 때&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;{n,}&lt;/td&gt;&lt;td&gt;문자가 n번 이상 반복될 때&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\&lt;/td&gt;&lt;td&gt;Escape&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;[\b]&lt;/td&gt;&lt;td&gt;Back space&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\f&lt;/td&gt;&lt;td&gt;Form Feed&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\n&lt;/td&gt;&lt;td&gt;Line Feed&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\r&lt;/td&gt;&lt;td&gt;Carrige Return&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\t&lt;/td&gt;&lt;td&gt;Tab&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\v&lt;/td&gt;&lt;td&gt;Vertical Tab&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\d&lt;/td&gt;&lt;td&gt;0~9 사이의 숫자 하나&lt;/td&gt;&lt;td&gt;[0-9]&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\D&lt;/td&gt;&lt;td&gt;숫자를 제외한 문자 하나&lt;/td&gt;&lt;td&gt;[^0-9]&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\w&lt;/td&gt;&lt;td&gt;대소문자와 밑줄을 포함하는 모든 영숫자&lt;/td&gt;&lt;td&gt;[a-zA-Z0-9&lt;em&gt;]&lt;/em&gt;&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\W&lt;/td&gt;&lt;td&gt;영숫자가 아니거나 밑줄이 아닌 모든 문자&lt;/td&gt;&lt;td&gt;[^a-zA-Z0-9]&lt;/td&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;\s&lt;/td&gt;&lt;td&gt;모든 공백 문자&lt;/td&gt;&lt;td&gt;[\f\n\r\t\v]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\S&lt;/td&gt;&lt;td&gt;공백 문자가 아닌 모든 문자&lt;/td&gt;&lt;td&gt;[^\f\n\r\t\v]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\x&lt;/td&gt;&lt;td&gt;16진수 표현&lt;/td&gt;&lt;td&gt;\x0A  (=ascii 10 == \n)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\0&lt;/td&gt;&lt;td&gt;8진수 표현&lt;/td&gt;&lt;td&gt;\011  (=ascii 9 == \t)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\c&lt;/td&gt;&lt;td&gt;제어문자&lt;/td&gt;&lt;td&gt;\cZ   (Ctrl+Z)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;^, \A&lt;/td&gt;&lt;td&gt;문자열의 시작 ([] 밖에 있을 때)       &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$, \Z&lt;/td&gt;&lt;td&gt;문자열의 끝                           &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\&amp;lt;  &lt;/td&gt;&lt;td&gt;단어의 시작과 일치                    &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\&amp;gt;  &lt;/td&gt;&lt;td&gt;단어의 끝과 일치                      &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\b   &lt;/td&gt;&lt;td&gt;단어 경계와 일치                      &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\B   &lt;/td&gt;&lt;td&gt;단어 경계가 아닐 때 일치              &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;()   &lt;/td&gt;&lt;td&gt;group 또는 back reference를 정의한다. &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;?=   &lt;/td&gt;&lt;td&gt;전방탐색                              &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;?&amp;lt;=  &lt;/td&gt;&lt;td&gt;후방탐색                              &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;?!   &lt;/td&gt;&lt;td&gt;부정형 전방탐색                       &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;?&amp;lt;! &lt;/td&gt;&lt;td&gt;부정형 후방탐색                       &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\l   &lt;/td&gt;&lt;td&gt;다음에 오는 글자를 소문자로 변환      &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\L   &lt;/td&gt;&lt;td&gt;\E를 만날 때까지 모든 문자를 소문자로 변환&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\u   &lt;/td&gt;&lt;td&gt;다음에 오는 글자를 대문자로 변환      &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\U   &lt;/td&gt;&lt;td&gt;\E를 만날 때까지 모든 문자를 대문자로 변환&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\E   &lt;/td&gt;&lt;td&gt;\L 또는 \U 의 End point               &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;줄 바꿈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: \r\n&lt;/li&gt;
&lt;li&gt;UNIX, LINUX: \n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;읽는 법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;!: Exclamation point&lt;/li&gt;
&lt;li&gt;“: Quotation mark&lt;/li&gt;
&lt;li&gt;‘: Apostrophe&lt;/li&gt;
&lt;li&gt;`: Grave&lt;/li&gt;
&lt;li&gt;.: Period&lt;/li&gt;
&lt;li&gt;^: Caret&lt;/li&gt;
&lt;li&gt;*: Asterisk&lt;/li&gt;
&lt;li&gt;-: Hyphen&lt;/li&gt;
&lt;li&gt;_: Underscore&lt;/li&gt;
&lt;li&gt;~: Tilde&lt;/li&gt;
&lt;li&gt;&amp;amp;: Ampersand&lt;/li&gt;
&lt;li&gt;(): Parenthesis&lt;/li&gt;
&lt;li&gt;{}: Brace&lt;/li&gt;
&lt;li&gt;[]: Bracket&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;gt;: Chevron&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Back-reference&quot;&gt;&lt;a href=&quot;#Back-reference&quot; class=&quot;headerlink&quot; title=&quot;Back reference&quot;&gt;&lt;/a&gt;Back reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;매칭된 결과를 다시 사용하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;로 묶인 패턴 매칭을 &lt;code&gt;\#&lt;/code&gt; 형태로 재사용할 수 있다. &lt;code&gt;#&lt;/code&gt;은 숫자.&lt;ul&gt;
&lt;li&gt;\1, \2, \3 …&lt;/li&gt;
&lt;li&gt;ex. &lt;code&gt;(a) = \1&lt;/code&gt; 의 매칭 결과는 &lt;code&gt;a = a&lt;/code&gt; 가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTML Tag를 parsing할 때 굉장히 효율적이다.&lt;ul&gt;
&lt;li&gt;ex. &lt;code&gt;&amp;lt;(table)&amp;gt;[.]*&amp;lt;\/\1&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;REGEX-in-JAVA&quot;&gt;&lt;a href=&quot;#REGEX-in-JAVA&quot; class=&quot;headerlink&quot; title=&quot;REGEX in JAVA&quot;&gt;&lt;/a&gt;REGEX in JAVA&lt;/h2&gt;&lt;p&gt;JAVA에서 정규 표현식을 사용하여 Pattern을 찾기 위해서는 아래와 같이 코드를 사용한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.regex.Matcher;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.regex.Pattern;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        String data = &lt;span class=&quot;string&quot;&gt;&quot;dog, cat and wolfwolfwolfwolfwolf&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Pattern p = Pattern.compile(&lt;span class=&quot;string&quot;&gt;&quot;^(dog), (cat) and (wolf)&amp;#123;3&amp;#125;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Matcher m = p.matcher(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m.find()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(m.group(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 매칭된 full string&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(m.group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 매칭된 full string 내의 첫 번째 group&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(m.group(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(m.group(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(m.group(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 이 예제에서 4번째 group은 없으므로 exception 발생&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;위 코드의 수행 결과는 다음과 같다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dog, cat and wolfwolfwolf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wolf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Exception &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.IndexOutOfBoundsException: No group 4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at java.util.regex.Matcher.group(Unknown Source)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    at com.lazyrodi.Main.main(Main.java:19)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;위 코드에서 일치하는 다음 문장을 찾기 위해서는 &lt;code&gt;m.find()&lt;/code&gt; 를 한 번 더 수행하면 다음 매칭되는 문장을 찾는다.&lt;/p&gt;
&lt;p&gt;Pattern Class 및 Matcher Class에 대한 자세한 정보는 JavaDoc (&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pattern&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Matcher&lt;/a&gt;)을 참조하자.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Tip&quot;&gt;&lt;a href=&quot;#Tip&quot; class=&quot;headerlink&quot; title=&quot;Tip&quot;&gt;&lt;/a&gt;Tip&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://regexper.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://regexper.com&lt;/a&gt; 라는 웹사이트에서 정규 표현식을 시각적으로 확인할 수 있게 도와주고 있다. 개인적으로 짱짱맨 사이트라고 생각한다.&lt;/p&gt;
&lt;p&gt;JavaScript에 대한 정규표현식 사용은 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mozilla 사이트&lt;/a&gt;에서 잘 설명하고 있다.&lt;/p&gt;
&lt;p&gt;예시 1&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;^(dog), (cat) and (cat)&amp;#123;3&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Regexper 결과 1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-02-etc-regular-expression-001.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;아래의 글들을 교재삼아 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Regular Expression - Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pattern Class - JavaDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Matcher Class - JavaDoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/02/2016-07-02-etc-regular-expression/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Memory management</title>
      <link>http://lazyrodi.github.io/2016/07/01/2016-07-01-common-memory-management/</link>
      <guid>http://lazyrodi.github.io/2016/07/01/2016-07-01-common-memory-management/</guid>
      <pubDate>Fri, 01 Jul 2016 11:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;CPU가 접근 가능한 저장소는 CPU 내부의 &lt;code&gt;Register&lt;/code&gt;그리고 &lt;code&gt;Main memory&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;CPU는 여기에서 &lt;code&gt;command&lt;/code&gt;를 &lt;code&gt;load&lt;/code&gt;하여 
      
      </description>
      
      <content:encoded>&lt;p&gt;CPU가 접근 가능한 저장소는 CPU 내부의 &lt;code&gt;Register&lt;/code&gt;그리고 &lt;code&gt;Main memory&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;CPU는 여기에서 &lt;code&gt;command&lt;/code&gt;를 &lt;code&gt;load&lt;/code&gt;하여 &lt;code&gt;processing&lt;/code&gt; 한다.&lt;/p&gt;
&lt;p&gt;보통 CPU는 &lt;code&gt;register&lt;/code&gt;에 &lt;code&gt;1 clock cycle&lt;/code&gt; 내에 접근이 가능하다.&lt;/p&gt;
&lt;p&gt;하지만 만약 &lt;code&gt;command&lt;/code&gt;가 &lt;code&gt;Main memory&lt;/code&gt;에 있을 경우 &lt;code&gt;1 clock&lt;/code&gt;이상의 시간이 소요되어 &lt;code&gt;stall(지연)&lt;/code&gt;된다. 이러면 낭비가 심해지기 때문에 &lt;code&gt;CPU&lt;/code&gt;와 &lt;code&gt;Main memory&lt;/code&gt; 사이에 &lt;code&gt;Cache&lt;/code&gt;를 두어 문제를 해결한다.&lt;/p&gt;
&lt;p&gt;Program은 &lt;code&gt;Binary execution file&lt;/code&gt; 형태로 디스크에 저장되어 있으며 실행되기 위해서는 &lt;code&gt;Main memory&lt;/code&gt;로 올라와서 &lt;code&gt;Process&lt;/code&gt;가 되어야 한다.&lt;/p&gt;
&lt;p&gt;Process는 효율적인 실행을 위해 디스크와 Main memory 사이를 왔다갔다 하는데 이 때 Main memory에 올라오기 위해 대기하고 있는 &lt;code&gt;Process들의 집합&lt;/code&gt;을 &lt;code&gt;Input Queue&lt;/code&gt;라 부른다.&lt;/p&gt;
&lt;p&gt;코드에서 사용하는 &lt;code&gt;symbol 형태&lt;/code&gt;(ex. pointer, *a)는 &lt;code&gt;Compiler&lt;/code&gt;에 의해 &lt;code&gt;Relocatable address(재배치 가능 주소)&lt;/code&gt;로 &lt;code&gt;binding&lt;/code&gt;되고 이는 &lt;code&gt;linkage editor&lt;/code&gt; 또는 &lt;code&gt;loader&lt;/code&gt;에 의해 &lt;code&gt;Absolute address(절대 주소, 물리 주소)&lt;/code&gt;로 &lt;code&gt;binding&lt;/code&gt;된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Binding&lt;/code&gt;은 시점에 따라 세 가지로 나눌 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile time binding&lt;ul&gt;
&lt;li&gt;Compile time에 Memory 내의 위치를 직접 알 수 있으면(process가 R번지부터 시작한다는 사실) Compiler는 &lt;code&gt;Absolute code(절대 코드)&lt;/code&gt;를 생성할 수 있다. 하지만 이 위치가 변경되어야 한다면 이 코드는 다시 compile되어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Load time binding&lt;ul&gt;
&lt;li&gt;Compile time에 적재 장소를 알 수 없다면 &lt;code&gt;Compiler&lt;/code&gt;는 &lt;code&gt;Binary code&lt;/code&gt;를 &lt;code&gt;Relocatable code&lt;/code&gt;로 만들어야 한다. &lt;code&gt;Relocatable code&lt;/code&gt;는 시작 주소가 변경되더라도 사용자 코드를 다시 reload만 하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Excution binding&lt;ul&gt;
&lt;li&gt;Process가 실행되는 중간에 memory 내의 한 segment에서 다른 segment로 옮겨질 수 있을 때 “바인딩이 실행 시간까지 허용되었다” 라고 이야기 하며, 이것이 가능하려면 특별한 Hardware를 이용해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU가 생성하는 주소를 &lt;code&gt;Logical address(논리 주소)&lt;/code&gt;라 하며, Memory가 다루는 주소를 &lt;code&gt;Physical address(물리 주소)&lt;/code&gt;라 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Compile time binding&lt;/code&gt;, &lt;code&gt;Load time binding&lt;/code&gt;에서는 &lt;code&gt;Logical address&lt;/code&gt;와 &lt;code&gt;Physical address&lt;/code&gt;가 같지만 &lt;code&gt;Excution binding&lt;/code&gt;에서는 서로 다르다. 이 때 사용하는 Logical address를 &lt;code&gt;Virtual address&lt;/code&gt;라고 부른다.&lt;/p&gt;
&lt;h4 id=&quot;Virtual-address&quot;&gt;&lt;a href=&quot;#Virtual-address&quot; class=&quot;headerlink&quot; title=&quot;Virtual address&quot;&gt;&lt;/a&gt;Virtual address&lt;/h4&gt;&lt;p&gt;  프로그램 실행 중 &lt;code&gt;Physical address&lt;/code&gt;로 바뀌어야 하는데 이 바꾸는 작업을 &lt;code&gt;Mapping&lt;/code&gt;이라 하며 &lt;code&gt;MMU (Memory Management Unit)&lt;/code&gt;에서 작업이 이루어진다.&lt;/p&gt;
&lt;h4 id=&quot;Dynamic-Loading-동적-적재&quot;&gt;&lt;a href=&quot;#Dynamic-Loading-동적-적재&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Loading(동적 적재)&quot;&gt;&lt;/a&gt;Dynamic Loading(동적 적재)&lt;/h4&gt;&lt;p&gt;  Physical memory 크기의 제한때문에 큰 program의 경우 미리 memory에 모두 올라와있지 못한다. 이를 해결하지 위해 &lt;code&gt;Dynamic Loading&lt;/code&gt;이 사용된다.&lt;/p&gt;
&lt;p&gt;  각 routine은 실제 호출되기 전까지는 memory에 올라오지 않고 relocatable 상태로 disk에 대기하고 있다가 Main program이 memory에 올라와 실행되고 이 routine이 다른 routine을 호출하게 되면 호출된 routine이 이미 memory에 laoding되어 있는지 확인한다. 없으면 &lt;code&gt;Relocatable linking loader&lt;/code&gt;가 호출되어 요구된 routine을 memory로 가져오고 이러한 변화를 테이블에 기록해 둔다. 그 후 CPU 제어는 중단되었던 routine으로 보내진다.&lt;/p&gt;
&lt;h4 id=&quot;Swapping&quot;&gt;&lt;a href=&quot;#Swapping&quot; class=&quot;headerlink&quot; title=&quot;Swapping&quot;&gt;&lt;/a&gt;Swapping&lt;/h4&gt;&lt;p&gt;  Process가 실행되기 위해서는 memory에 있어야 하지만 항상 점유하고 있을 수는 없다. 따라서 실행되는 도중에 임시로 Sub memory로 보내졌다가 다시 Main memory로 돌아올 수 있다.&lt;/p&gt;
&lt;p&gt;  Swapping을 변형하여 우선순위를 두어 처리하는 것을 &lt;code&gt;Roll-in, Roll-out&lt;/code&gt; 이라고도 부른다.&lt;/p&gt;
&lt;p&gt;  Swapping system은 Context-switching time이 상당히 오래 걸린다.&lt;/p&gt;
&lt;h4 id=&quot;Fragmentation&quot;&gt;&lt;a href=&quot;#Fragmentation&quot; class=&quot;headerlink&quot; title=&quot;Fragmentation&quot;&gt;&lt;/a&gt;Fragmentation&lt;/h4&gt;&lt;p&gt;  memory의 이곳 저곳을 점유하다보면 크기에 따라 중간중간 비는 공간이 나타나게 되고 이를 &lt;code&gt;Fragmentation&lt;/code&gt;이라 부른다.&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;Fragmentation&lt;/code&gt; 문제를 해결하기 위해 두 가지 기법을 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paging&lt;/li&gt;
&lt;li&gt;Segmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Paging&quot;&gt;&lt;a href=&quot;#Paging&quot; class=&quot;headerlink&quot; title=&quot;Paging&quot;&gt;&lt;/a&gt;Paging&lt;/h4&gt;&lt;p&gt;  Physical memory는 &lt;code&gt;frame&lt;/code&gt;이라는 같은 크기의 block들로 나누어져 있고 Logical memory는 &lt;code&gt;page&lt;/code&gt;라는 같은 크기의 block들로 나누어져 있다.&lt;/p&gt;
&lt;p&gt;  CPU에서 나오는 모든 주소는 &lt;code&gt;Page number(p)&lt;/code&gt;와 &lt;code&gt;Offset(d)&lt;/code&gt;로 구성된다. &lt;code&gt;Page number&lt;/code&gt;는 &lt;code&gt;Page table&lt;/code&gt;에 access할 때 사용되며 &lt;code&gt;Page table&lt;/code&gt;은 Main memory에서 각 page가 점유하는 주소를 가지고 있다. 이 주소에 &lt;code&gt;Offset&lt;/code&gt;을 더하면 원하는 &lt;code&gt;Physical address&lt;/code&gt;가 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-01-common-memory-management-001.jpg&quot; alt=&quot;paging hardware&quot;&gt;{:class=”img-responsive”}&lt;/p&gt;
&lt;p&gt;  Frame 및 Page의 크기는 Hardware에 의해 정의되며 &lt;code&gt;Page의 크기는 일반적으로 512 byte ~ 16 MB 사이이며 2의 제곱으로 증가한다.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Logical address의 크기가 2^m 이고 page가 2^n의 크기를 갖는다면 Logical address의 상위 m-n 비트는 page number를 나타내고, 하위 n 비트는 page offset을 나타낸다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-01-common-memory-management-002.jpg&quot; alt=&quot;paging model&quot;&gt;{:class=”img-responsive”}&lt;/p&gt;
&lt;h4 id=&quot;Segmentation&quot;&gt;&lt;a href=&quot;#Segmentation&quot; class=&quot;headerlink&quot; title=&quot;Segmentation&quot;&gt;&lt;/a&gt;Segmentation&lt;/h4&gt;&lt;p&gt;  사용자는 하나의 Program을 &lt;code&gt;subroutine&lt;/code&gt;, &lt;code&gt;procedure&lt;/code&gt;, &lt;code&gt;function 또는 module&lt;/code&gt;들을 가지고 있는 것으로 생각하고, &lt;code&gt;Table&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Stack&lt;/code&gt; 등의 다양한 변수를 사용한다. &lt;/p&gt;
&lt;p&gt;  이러한 사용자가 바라보는 Memory의 관점을 그대로 지원하는 Memory Management 기법이다.&lt;/p&gt;
&lt;p&gt;  쉬운 구현을 위해 Segment name 대신 Segment number가 System에 의해 매겨지고 Segment는 number로 불리운다. 때문에 Logical address는 &lt;code&gt;&amp;lt;segment-number, offset&amp;gt;&lt;/code&gt;으로 구성된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-01-common-memory-management-003.jpg&quot; alt=&quot;segment example&quot;&gt;{:class=”img-responsive”}&lt;/p&gt;
&lt;h2 id=&quot;Virtual-Memory&quot;&gt;&lt;a href=&quot;#Virtual-Memory&quot; class=&quot;headerlink&quot; title=&quot;Virtual Memory&quot;&gt;&lt;/a&gt;Virtual Memory&lt;/h2&gt;&lt;p&gt;  Process 전체가 Memory에 올라오지 않더라도 실행이 가능하게 하는 기법이다. Physical memory로부터 사용자 관점의 Logical memory를 분리시켜 Main memory를 균일한 크기의 저장 공간으로 구성된 엄청나게 큰 배열로 추상화시켜 준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장점&lt;ul&gt;
&lt;li&gt;(Physical) Memory size의 제약으로부터 자유로워진다.&lt;/li&gt;
&lt;li&gt;File의 공유를 쉽게 해주고 Shared memory 구현을 가능케 한다.&lt;/li&gt;
&lt;li&gt;Process 생성을 효율적으로 처리할 수 있는 Mechanism을 제공한다.&lt;/li&gt;
&lt;li&gt;많은 program을 동시에 수행 가능하고 이에 따라 응답 시간(response time, turnaround time)은 늘어나지 않으면서도 CPU 이용률(utilization)과 처리율(throughput)이 높아진다.&lt;/li&gt;
&lt;li&gt;swap하는데 필요한 입/출력 횟수가 줄어들어 program들이 상대적으로 빠르게 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구현하기 어렵다.&lt;/li&gt;
&lt;li&gt;잘못 사용하면 성능이 크게 저하된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;앞에서 본 Memory management 기법 중 Dynamic loading은 process 전체를 memory에 올려야 한다는 제약을 어느정도 막아주긴 하지만 프로그래머가 추가적인 작업을 해야한다.&lt;/p&gt;
&lt;p&gt;앞서 본 것처럼 &lt;code&gt;page frame&lt;/code&gt;들로 인해 Physical memory는 연속적인 공간이 아닐 수 있다. MMU(Memory Management Unit)는 Physical memory를 Logical memory로 mapping한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Virtual Memory&lt;/code&gt;의 각 &lt;code&gt;area&lt;/code&gt;는 다음과 같이 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main() 함수, Callback 함수의 주소, 지역변수, 파라미터, return value가 저장되는 영역이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sparse&lt;ul&gt;
&lt;li&gt;빈 공간을 포함한 Stack과 Heap 사이의 영역이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heap&lt;ul&gt;
&lt;li&gt;동적 메모리 할당 영역이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data&lt;ul&gt;
&lt;li&gt;전역변수, 정적변수(static), 배열, 구조체, 상수가 저장되는 영역이다.&lt;/li&gt;
&lt;li&gt;Data 영역은 두 가지 영역으로 구분할 수 있다.&lt;ul&gt;
&lt;li&gt;Data&lt;ul&gt;
&lt;li&gt;초기값이 있는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BSS (Block Started by Symbol)&lt;ul&gt;
&lt;li&gt;초기값이 없는 경우우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code&lt;ul&gt;
&lt;li&gt;작성한 Code가 저장되는 영역이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-01-common-memory-management-004.jpg&quot; alt=&quot;virtual memory&quot;&gt;{:class=”img-responsive”}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code, Data, Stack 영역은 Compiler가 Memory의 크기를 결정한다.&lt;/li&gt;
&lt;li&gt;Heap 영역의 크기는 개발자에 의해 프로그램 동작 시 결정된다.&lt;/li&gt;
&lt;li&gt;Stack의 지역변수는 사용 후 소멸하므로 데이터 용량이 불확실하다. 따라서 밑에서부터 올라가면서 값이 채워진다.&lt;/li&gt;
&lt;li&gt;Heap overflow&lt;ul&gt;
&lt;li&gt;Heap 영역이 Stack 영역을 침범한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stack overflow&lt;ul&gt;
&lt;li&gt;Stack 영역이 Heap 영역을 침범한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래 그림은 wikipedia에서 설명하고 있는 동적 할당에 대한 그림이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/ko/2/22/C_MemMap_Exam_VS.png&quot; alt=&quot;Memory map&quot;&gt;{:class=”img-responsive”}&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;아래의 글들을 교재삼아 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.naver.com/k5248/220724196178&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.naver.com/k5248/220724196178&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EB%A9%94%EB%AA%A8%EB%A6%AC_%ED%95%A0%EB%8B%B9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EB%A9%94%EB%AA%A8%EB%A6%AC_%ED%95%A0%EB%8B%B9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Operating System Concepts (공룡책)&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/07/01/2016-07-01-common-memory-management/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Fundamental of Database</title>
      <link>http://lazyrodi.github.io/2016/06/30/2016-04-13-db-fundamental-of-database/</link>
      <guid>http://lazyrodi.github.io/2016/06/30/2016-04-13-db-fundamental-of-database/</guid>
      <pubDate>Thu, 30 Jun 2016 11:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Database는 간단히 &lt;code&gt;데이터들의 모임&lt;/code&gt; 이라고 보면 된다.&lt;/p&gt;
&lt;p&gt;아래의 속성들을 충족해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;의존성&lt;/li&gt;
&lt;li&gt;일관성&lt;/li&gt;
&lt;li&gt;보안성&lt;/li&gt;
&lt;li&gt;경제성&lt;/li&gt;
&lt;li&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;Database는 간단히 &lt;code&gt;데이터들의 모임&lt;/code&gt; 이라고 보면 된다.&lt;/p&gt;
&lt;p&gt;아래의 속성들을 충족해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;의존성&lt;/li&gt;
&lt;li&gt;일관성&lt;/li&gt;
&lt;li&gt;보안성&lt;/li&gt;
&lt;li&gt;경제성&lt;/li&gt;
&lt;li&gt;무결성&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#결론&quot; class=&quot;headerlink&quot; title=&quot;결론&quot;&gt;&lt;/a&gt;결론&lt;/h2&gt;&lt;p&gt;뜬금없이 두괄식 정리를 해본다.&lt;/p&gt;
&lt;hr&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;Database&lt;/th&gt;&lt;th&gt;장점&lt;/th&gt;&lt;th&gt;단점&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;4&quot;&gt;HDB&lt;/td&gt;&lt;td&gt;구조가 간단하고 판독이 용이하다.&lt;/td&gt;&lt;td&gt;데이터 상호 간의 유연성이 부족하다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;구현, 수정, 검색이 용이하다.&lt;/td&gt;&lt;td&gt;검색 경로가 한정되어 있다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;데이터 액세스 속도가 빠르다.&lt;/td&gt;&lt;td&gt;삽입/삭제 연산이 매우 복잡하다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;데이터의 사용량을 쉽게 예측 가능하다.&lt;/td&gt;&lt;td&gt;다 대 다 관계를 처리하기 어렵다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;NDB&lt;/td&gt;&lt;td&gt;상하 종속적인 관계를 쉽게 해결한다.&lt;/td&gt;&lt;td&gt;구성, 설계가 복잡하다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;데이터의 종속성을 해결하지 못한 시스템이다.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;4&quot;&gt;RDB&lt;/td&gt;&lt;td&gt;데이터의 일관성을 보증할 수 있음. (Transaction)&lt;/td&gt;&lt;td&gt;대량 데이터 처리 시 성능 이슈.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;정규화를 전제로 하기 때문에 갱신 시의 비용이 적게 든다.&lt;/td&gt;&lt;td&gt;갱신이 발생한 Table의 인덱스 생성이나 스키마 변경에 대한 처리 이슈.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JOIN 등 복잡한 검색 조건으로 검색이 가능함.&lt;/td&gt;&lt;td&gt;Column을 확실히 정의하기 어려운 경우에 대한 처리 이슈.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;간결하고, 보기 편하다.&lt;/td&gt;&lt;td&gt;단순히 빨리 결과를 조회하고자 할 때의 성능 이슈.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OODB&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;NoSQL&lt;/td&gt;&lt;td&gt;대량의 Record 처리에 유리하다.&lt;/td&gt;&lt;td&gt;JOIN 연산이 불가능하다.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Database의 구성요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Schema&lt;/li&gt;
&lt;li&gt;DBMS (Database Management System)&lt;/li&gt;
&lt;li&gt;Database Language&lt;/li&gt;
&lt;li&gt;Database Storage&lt;/li&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database의 종류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File System - File type&lt;/li&gt;
&lt;li&gt;HDB (Hierachical Database, 계층형 데이터베이스) - Segment type&lt;/li&gt;
&lt;li&gt;NDB (Network Database, 네트워크형 데이터베이스) - Record type&lt;/li&gt;
&lt;li&gt;RDB (Relational Database, 관계형 데이터베이스) - Table type&lt;/li&gt;
&lt;li&gt;OODB (Object-Oriented Database 객체지향형 데이터베이스) - Class type&lt;/li&gt;
&lt;li&gt;NoSQL (Not only SQL)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Database의-종류&quot;&gt;&lt;a href=&quot;#Database의-종류&quot; class=&quot;headerlink&quot; title=&quot;Database의 종류&quot;&gt;&lt;/a&gt;Database의 종류&lt;/h2&gt;&lt;h3 id=&quot;File-System&quot;&gt;&lt;a href=&quot;#File-System&quot; class=&quot;headerlink&quot; title=&quot;File System&quot;&gt;&lt;/a&gt;File System&lt;/h3&gt;&lt;p&gt;말 그대로 파일시스템을 의미한다.&lt;/p&gt;
&lt;h3 id=&quot;HDB-Hierachical-Database&quot;&gt;&lt;a href=&quot;#HDB-Hierachical-Database&quot; class=&quot;headerlink&quot; title=&quot;HDB (Hierachical Database)&quot;&gt;&lt;/a&gt;HDB (Hierachical Database)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;트리구조를 기반으로 하는 계층형 데이터 모델을 사용한다.&lt;/li&gt;
&lt;li&gt;데이터는 트리 형태로 구성되며 각 데이터 요소(Entity)들은 상하 관계를 나타내는 Link로 구성된다.&lt;/li&gt;
&lt;li&gt;제품&lt;ul&gt;
&lt;li&gt;Adabas&lt;/li&gt;
&lt;li&gt;GT.M&lt;/li&gt;
&lt;li&gt;IMS&lt;/li&gt;
&lt;li&gt;MUMPS&lt;/li&gt;
&lt;li&gt;Cache&lt;/li&gt;
&lt;li&gt;Metakit&lt;/li&gt;
&lt;li&gt;Multidimensional hierachical toolkit&lt;/li&gt;
&lt;li&gt;Mumps compiler&lt;/li&gt;
&lt;li&gt;DMSII&lt;/li&gt;
&lt;li&gt;FOCUS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;NDB-Network-Database&quot;&gt;&lt;a href=&quot;#NDB-Network-Database&quot; class=&quot;headerlink&quot; title=&quot;NDB (Network Database)&quot;&gt;&lt;/a&gt;NDB (Network Database)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;그래프 구조를 기반으로 하는 네트워크형 데이터 모델을 사용한다. 이는 Entity와 Entity 간의 Relationship을 그래프로 연결한다.&lt;/li&gt;
&lt;li&gt;HDB와 비슷하지만 부모(상위 Entity)를 여러 개 가질 수 있다.&lt;/li&gt;
&lt;li&gt;제품&lt;ul&gt;
&lt;li&gt;IDS&lt;/li&gt;
&lt;li&gt;IDMS&lt;/li&gt;
&lt;li&gt;RDM Embedded&lt;/li&gt;
&lt;li&gt;RDM Server&lt;/li&gt;
&lt;li&gt;터보이미지&lt;/li&gt;
&lt;li&gt;유니박 DMS-1100&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;RDB-Relational-Database&quot;&gt;&lt;a href=&quot;#RDB-Relational-Database&quot; class=&quot;headerlink&quot; title=&quot;RDB (Relational Database)&quot;&gt;&lt;/a&gt;RDB (Relational Database)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;현재까지 가장 안정적이고 효율적인 Database로 알려져있다.&lt;/li&gt;
&lt;li&gt;Entity를 Table로 사용하고 Entity 간의 공동 Attribute를 이용하여 서로 연결하는 독립된 형태의 데이터 모델이다.&lt;/li&gt;
&lt;li&gt;SQL을 사용한다.&lt;/li&gt;
&lt;li&gt;제품&lt;ul&gt;
&lt;li&gt;Oracle (Oracle)&lt;/li&gt;
&lt;li&gt;MS-SQL Serve (Microsoft)&lt;/li&gt;
&lt;li&gt;MySQL (Oracle -SunMicroSystems-)&lt;/li&gt;
&lt;li&gt;DB2 (IBM)&lt;/li&gt;
&lt;li&gt;Infomix (IBM)&lt;/li&gt;
&lt;li&gt;Sybase (Sybase)&lt;/li&gt;
&lt;li&gt;Derby (Apache)&lt;/li&gt;
&lt;li&gt;SQLite (Opensource)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;OODB-Object-Oriented-Database&quot;&gt;&lt;a href=&quot;#OODB-Object-Oriented-Database&quot; class=&quot;headerlink&quot; title=&quot;OODB (Object-Oriented Database)&quot;&gt;&lt;/a&gt;OODB (Object-Oriented Database)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Class, Object, Attribute, Method, Instance, Capsulation, Inheritance 등을 기반으로 데이터를 구조화하는 데이터 모델이다.&lt;/li&gt;
&lt;li&gt;비지니스형 데이터 타입만 처리되는 RDBMS의 기본적인 제한점을 극복하기 위해 고안되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;NoSQL-Not-only-SQL&quot;&gt;&lt;a href=&quot;#NoSQL-Not-only-SQL&quot; class=&quot;headerlink&quot; title=&quot;NoSQL (Not only SQL)&quot;&gt;&lt;/a&gt;NoSQL (Not only SQL)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL을 사용하지 않는다는 뜻이다.&lt;/li&gt;
&lt;li&gt;Schema가 없다.&lt;/li&gt;
&lt;li&gt;대용량 데이터 처리에 유리하고 분산 처리가 가능하여 Cloud computing에 유리하다.&lt;/li&gt;
&lt;li&gt;종류&lt;ul&gt;
&lt;li&gt;Key/Value type&lt;ul&gt;
&lt;li&gt;Memchached&lt;/li&gt;
&lt;li&gt;Tokyo Tyrant&lt;/li&gt;
&lt;li&gt;Flare&lt;/li&gt;
&lt;li&gt;Roma&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Document type: 여러가지 형태의 값들을 모아둔 논리적 구조.&lt;ul&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;CouchDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Big Table (Column) type: RDB는 Row 단위로 데이터를 관리하지만 Colume type은 Column 단위로 데이터를 관리한다.&lt;ul&gt;
&lt;li&gt;HBase&lt;/li&gt;
&lt;li&gt;Casandra&lt;/li&gt;
&lt;li&gt;Hypertable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Schema-Meta-Data&quot;&gt;&lt;a href=&quot;#Schema-Meta-Data&quot; class=&quot;headerlink&quot; title=&quot;Schema (Meta-Data)&quot;&gt;&lt;/a&gt;Schema (Meta-Data)&lt;/h2&gt;&lt;p&gt;Database의 구조 및 제약 조건에 대해 전반적으로 기술한 것을 &lt;code&gt;Schema&lt;/code&gt;라고 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Entity(Table)&lt;/code&gt;, &lt;code&gt;Attribute(Field)&lt;/code&gt;, &lt;code&gt;Relationship&lt;/code&gt; 및 데이터 조작 시 데이터 값들이 갖는 제약 조건 등에 대해 정의한다.&lt;/p&gt;
&lt;p&gt;Schema는 Data Dictionary에 저장된다.&lt;/p&gt;
&lt;p&gt;쉽게 말해 Data structure가 어떻게 생겼는지 정의하며, RDB에서는 아래 코드처럼 생겼다.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Player (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  name    CHAR(20),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  number  INTEGER(4)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Status (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  number    INTEGER(4),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  point     INTEGER(4),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  trophy    CHAR(20)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;DBMS&quot;&gt;&lt;a href=&quot;#DBMS&quot; class=&quot;headerlink&quot; title=&quot;DBMS&quot;&gt;&lt;/a&gt;DBMS&lt;/h2&gt;&lt;p&gt;기존 파일 시스템이 갖는 데이터 종속성과 중복성 문제를 해결하기 위해 제안된 시스템으로 모든 Application들이 Database를 공용으로 사용할 수 있도록 관리한다.&lt;/p&gt;
&lt;p&gt;DBMS의 궁극적 목표는 &lt;code&gt;데이터의 독립성&lt;/code&gt;이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;논리적 독립성&lt;/code&gt;: &lt;code&gt;Application&lt;/code&gt;과 &lt;code&gt;Database&lt;/code&gt;를 독립시켜 Data에 변경이 발생하여도 Application은 변경되지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;물리적 독립성&lt;/code&gt;: &lt;code&gt;Application&lt;/code&gt;과 &lt;code&gt;Storage&lt;/code&gt;를 독립시켜 디스크에 변경이 발생하여도 Application은 변경되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DBMS의-필수-기능&quot;&gt;&lt;a href=&quot;#DBMS의-필수-기능&quot; class=&quot;headerlink&quot; title=&quot;DBMS의 필수 기능&quot;&gt;&lt;/a&gt;DBMS의 필수 기능&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;정의 (Definition)&lt;/code&gt;: Type 및 Structure에 대한 정의, 이용 방식, 제약 조건을 정의한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;조작 (Manipulation)&lt;/code&gt;: 데이터의 검색, 갱신, 삽입, 삭제 등의 처리를 위해 User와 Database 사이의 Interface를 제공하는 것을 의미한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;제어 (Control)&lt;/code&gt;: 데이터의 정확성, 무결성, 보안 및 권한 검사, 병행수행 제어 등의 기능을 정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Releationship-관계&quot;&gt;&lt;a href=&quot;#Releationship-관계&quot; class=&quot;headerlink&quot; title=&quot;Releationship (관계)&quot;&gt;&lt;/a&gt;Releationship (관계)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;일 대 일&lt;/li&gt;
&lt;li&gt;일 대 다&lt;/li&gt;
&lt;li&gt;다 대 다&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Key&quot;&gt;&lt;a href=&quot;#Key&quot; class=&quot;headerlink&quot; title=&quot;Key&quot;&gt;&lt;/a&gt;Key&lt;/h2&gt;&lt;p&gt;조건을 만족하는 Tuple을 찾거나 순서대로 정렬할 때 Tuple들을 구분할 수 있는 기준이 되는 Attribute를 의미한다.&lt;/p&gt;
&lt;h3 id=&quot;Candidate-Key-후보키&quot;&gt;&lt;a href=&quot;#Candidate-Key-후보키&quot; class=&quot;headerlink&quot; title=&quot;Candidate Key (후보키)&quot;&gt;&lt;/a&gt;Candidate Key (후보키)&lt;/h3&gt;&lt;p&gt;Relation을 구성하는 Attribute들 중에서 &lt;code&gt;Tuple을 식별하기 위해 사용하는 Attribute들의 부분 집합&lt;/code&gt;을 의미한다. &lt;code&gt;Primary Key로 사용할 수 있는 Attribute&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;ex) &lt;code&gt;주민&lt;/code&gt; Relation에서의 &lt;code&gt;주민등록번호&lt;/code&gt; 또는 &lt;code&gt;지문&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유일성 (Unique): 하나의 Key 값으로 하나의 Tuple만을 식별할 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;최소성 (Minimality): 모든 Record들을 유일하게 식별하는데 꼭 필요한 Attribute들로만 이루어져야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Primary-Key-기본키&quot;&gt;&lt;a href=&quot;#Primary-Key-기본키&quot; class=&quot;headerlink&quot; title=&quot;Primary Key (기본키)&quot;&gt;&lt;/a&gt;Primary Key (기본키)&lt;/h3&gt;&lt;p&gt;Candidate Key 중 선택한 Main Key를 의미하며 NULL 이 될 수 없다.&lt;/p&gt;
&lt;h3 id=&quot;Alternate-Key-대체키&quot;&gt;&lt;a href=&quot;#Alternate-Key-대체키&quot; class=&quot;headerlink&quot; title=&quot;Alternate Key (대체키)&quot;&gt;&lt;/a&gt;Alternate Key (대체키)&lt;/h3&gt;&lt;p&gt;Candidate Key가 두 개 이상일 때 Primary Key를 제외한 나머지 Candidate Key들을 의미하며 보조키라고도 부른다.&lt;/p&gt;
&lt;h3 id=&quot;Super-Key-슈퍼키&quot;&gt;&lt;a href=&quot;#Super-Key-슈퍼키&quot; class=&quot;headerlink&quot; title=&quot;Super Key (슈퍼키)&quot;&gt;&lt;/a&gt;Super Key (슈퍼키)&lt;/h3&gt;&lt;p&gt;하나의 Table 내에 있는 Attribute들의 집합으로 구성된 Key를 말한다. Table을 구성하는 모든 Tuple 중 Super Key로 구성된 Attribute의 집합과 동일한 값은 나타나지 않는다.&lt;/p&gt;
&lt;p&gt;Super Key는 Table을 구성하는 모든 Tuple에 대해 &lt;code&gt;유일성&lt;/code&gt;은 만족시키지만 &lt;code&gt;최소성&lt;/code&gt;은 만족시키지 못한다.&lt;/p&gt;
&lt;h3 id=&quot;Foreign-Key-외래키&quot;&gt;&lt;a href=&quot;#Foreign-Key-외래키&quot; class=&quot;headerlink&quot; title=&quot;Foreign Key (외래키)&quot;&gt;&lt;/a&gt;Foreign Key (외래키)&lt;/h3&gt;&lt;p&gt;두 개의 Table이 Relationship을 맺고있을 때 A의 Primary Key와 같은 B의 Attribute 를 Foreign Key 라 부른다.&lt;/p&gt;
&lt;p&gt;즉, 아래 그림에서 A가 B를 참조한다고 하면 B의 &lt;code&gt;주민등록번호&lt;/code&gt;는 Primary Key가 되고 A의 &lt;code&gt;주민등록번호&lt;/code&gt;는 Foreign Key가 된다.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Field가 적어서 예시가 적절하지 않은 것도 같고…&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-06-30-db-fundamental-of-database-001.jpg&quot; alt=&quot;Foreign Key&quot;&gt;{:class=”img-responsive”}&lt;/p&gt;
&lt;p&gt;Foreign Key를 사용하면 실수로 Data를 삭제하는 것을 막을 수 있다. 다른 Table의 Foreign Key로 참조하고 있는 Row는 Table에서 삭제할 수 없기 때문이다. 이를 &lt;code&gt;참조 무결성(Reference Integrity)&lt;/code&gt;이라고 부른다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Integrity (무결성)&lt;/code&gt; 이란 데이터를 보호하고 항상 정상인 상태를 유지하는 것을 말한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;개체 무결성&lt;ul&gt;
&lt;li&gt;Table에서 Primary Key를 구성하는 Attribute는 NULL이나 중복값을 가져서는 안 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;참조 무결성&lt;ul&gt;
&lt;li&gt;Foreign Key의 값은 NULL이나 참조 Table의 Primary Key값과 동일해야 한다. 즉, Table은 참조할 수 없는 Foreign Key의 값을 가질 수 없다. (실수로 삭제하는 것을 예방할 수 있는 이유이다.)&lt;/li&gt;
&lt;li&gt;Foreign Key와 참조하려는 Table의 Primary Key는 Domain과 Attribute의 개수가 같아야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Transaction&quot;&gt;&lt;a href=&quot;#Transaction&quot; class=&quot;headerlink&quot; title=&quot;Transaction&quot;&gt;&lt;/a&gt;Transaction&lt;/h2&gt;&lt;p&gt;한 단위를 이루는 일련의 연관된 데이터베이스 조작.&lt;/p&gt;
&lt;p&gt;하나의 Transaction에 속하는 작업 중 하나라도 실패하면 Transaction 전체가 실패한 것으로 간주하여 변경한 내용을 모두 원래대로 되돌려 놓는다. 이를 &lt;code&gt;Rollback&lt;/code&gt;이라 한다.&lt;/p&gt;
&lt;p&gt;모든 작업이 성공적으로 처리되면 모든 변경 내용을 한꺼번에 반영하고 이를 &lt;code&gt;Commit&lt;/code&gt;이라 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transaction의 특성 (ACID)&lt;ul&gt;
&lt;li&gt;Atomicity (원자성)&lt;ul&gt;
&lt;li&gt;Transaction에 포함된 모든 작업이 성공적으로 처리되지 않으면 어떠한 작업도 처리되지 않아야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistency (일관성)&lt;ul&gt;
&lt;li&gt;Transaction의 시작 전과 종료 후의 Database가 일관된 상태를 유지해야 한다. 참조 무결성이 깨져서는 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Isolation (고립성)&lt;ul&gt;
&lt;li&gt;하나의 Transaction에서 Database를 변경한 내용은 Transaction이 Commit될 때까지 다른 어떤 Query나 Transaction과도 고립되어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Durability (영속성)&lt;ul&gt;
&lt;li&gt;Commit이 이루어지면 Transaction에 의해 변경된 내용은 영구적으로 유지되어야 한다. DBMS는 Database의 현재 상태가 유실되지 않도록 시스템 충돌 등의 문제로부터 복구할 수 있는 방안을 갖춰야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;용어&quot;&gt;&lt;a href=&quot;#용어&quot; class=&quot;headerlink&quot; title=&quot;용어&quot;&gt;&lt;/a&gt;용어&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Table&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Relation(관계)&lt;/code&gt; 또는 &lt;code&gt;Entity(개체)&lt;/code&gt;라 부른다. &lt;code&gt;Column&lt;/code&gt;(열, ↕) 과 &lt;code&gt;Row&lt;/code&gt;(행, ↔) 으로 구성된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Field&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Attribute(속성)&lt;/code&gt;이라고도 한다. &lt;code&gt;Table&lt;/code&gt;의 &lt;code&gt;Column&lt;/code&gt;을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Degree(차수)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Attribute&lt;/code&gt;의 수를 뜻한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Record&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Tuple&lt;/code&gt; 이라고도 하며 &lt;code&gt;Table&lt;/code&gt;의 &lt;code&gt;Row&lt;/code&gt;를 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cardinality&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;하나의 &lt;code&gt;Relation&lt;/code&gt;을 구성하는 &lt;code&gt;Tuple(Record)&lt;/code&gt;의 수를 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Domain&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;하나의 &lt;code&gt;Attribute&lt;/code&gt;가 가질 수 있는 &lt;code&gt;같은 type의 Atomic(원자) 집합&lt;/code&gt; 을 의미한다.&lt;ul&gt;
&lt;li&gt;예) &lt;code&gt;학생&lt;/code&gt; relation에서 &lt;code&gt;학년&lt;/code&gt;의 &lt;code&gt;domain&lt;/code&gt;은 &lt;code&gt;1 ~ 6&lt;/code&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DBMS (Database Management System)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DDL (Data Definition Language)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;테이블을 생성하고 삭제하는 언어를 뜻한다.&lt;/li&gt;
&lt;li&gt;CREATE, ALTER, DROP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DML (Data Manipulation Language) = 서브 언어&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;User가 데이터를 처리할 수 있게 도와주는 도구.&lt;/li&gt;
&lt;li&gt;SELECT, INSERT, UPDATE, DELETE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DCL (Data Control Language)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;데이터의 보호, 관리를 위해 사용된다.&lt;/li&gt;
&lt;li&gt;COMMIT, ROLLBACK, GRANT, REVOKE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scale up&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;사용 중인 서버를 고성능으로 바꿔 처리 능력을 향상시키는 방법으로 비용이 발생하지만 소스에 대한 변경이 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scale down&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;저가의 여러 장비를 사용하여 능력을 향상시키는 방법으로 소스에 대한 수정이 필요하다. 주로 NoSQL에서 제공하는 방식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;아래의 글들을 교재삼아 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dreamzelkova.tistory.com/393&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dreamzelkova.tistory.com/393&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.naver.com/bobojisu/220561467061&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.naver.com/bobojisu/220561467061&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ourcstory.tistory.com/30&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ourcstory.tistory.com/30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cafe.naver.com/junes81/5895&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cafe.naver.com/junes81/5895&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EB%AA%A8%EB%8D%B8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EB%AA%A8%EB%8D%B8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/06/30/2016-04-13-db-fundamental-of-database/#disqus_thread</comments>
    </item>
    
    <item>
      <title>File IO(Input/Output)</title>
      <link>http://lazyrodi.github.io/2016/06/29/2016-06-29-java-fileio/</link>
      <guid>http://lazyrodi.github.io/2016/06/29/2016-06-29-java-fileio/</guid>
      <pubDate>Wed, 29 Jun 2016 12:02:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;JAVA에서의 파일 입출력은 &lt;code&gt;Stream(데이터의 흐름)&lt;/code&gt;을 통해 이루어진다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;은 다음과 같이 나눌 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;흐름의 방향&lt;ul&gt;
&lt;li&gt;Input&lt;/li
      
      </description>
      
      <content:encoded>&lt;p&gt;JAVA에서의 파일 입출력은 &lt;code&gt;Stream(데이터의 흐름)&lt;/code&gt;을 통해 이루어진다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt;은 다음과 같이 나눌 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;흐름의 방향&lt;ul&gt;
&lt;li&gt;Input&lt;/li&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Type&lt;ul&gt;
&lt;li&gt;Byte&lt;/li&gt;
&lt;li&gt;Character&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Byte-stream&quot;&gt;&lt;a href=&quot;#Byte-stream&quot; class=&quot;headerlink&quot; title=&quot;Byte stream&quot;&gt;&lt;/a&gt;Byte stream&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Byte stream&lt;/code&gt;의 경우 아래와 같은 Class들을 사용할 수 있다.&lt;br&gt;&lt;img src=&quot;http://www.tutorialspoint.com/java/images/file_io.jpg&quot; alt=&quot;Java FileIO&quot;&gt;&lt;br&gt;[ &lt;a href=&quot;http://www.tutorialspoint.com/java/java_files_io.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorials Point&lt;/a&gt; 에서 퍼온 그림 ]&lt;/p&gt;
&lt;p&gt;아래 소스는 &lt;code&gt;input.txt&lt;/code&gt;를 &lt;code&gt;8-bit Byte&lt;/code&gt; 단위로 data를 읽어서 &lt;code&gt;output.txt&lt;/code&gt; 에 복사한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileOutputStream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileIO&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        FileInputStream in = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        FileOutputStream out = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            in = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;string&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            out = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileOutputStream(&lt;span class=&quot;string&quot;&gt;&quot;output.txt&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((c = in.read()) != -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                out.write(c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (in != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                in.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (out != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                out.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Character-stream&quot;&gt;&lt;a href=&quot;#Character-stream&quot; class=&quot;headerlink&quot; title=&quot;Character stream&quot;&gt;&lt;/a&gt;Character stream&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Character stream&lt;/code&gt;은 &lt;code&gt;16-bit unicode&lt;/code&gt; 단위로 data를 처리한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Byte stream&lt;/code&gt;과 다른 점은 &lt;code&gt;FileReader&lt;/code&gt;와 &lt;code&gt;FileWriter&lt;/code&gt;를 사용한다는 것이다.&lt;/p&gt;
&lt;p&gt;이 두 가지 Class는 내부적으로는 &lt;code&gt;FileInputStream&lt;/code&gt;과 &lt;code&gt;FileOutputStream&lt;/code&gt;을 사용하지만 한 번에 2 byte 씩 처리한다는 것이 차이점이다.&lt;/p&gt;
&lt;p&gt;아래 소스는 &lt;code&gt;input.txt&lt;/code&gt;를 &lt;code&gt;16-bit, 2 Byte&lt;/code&gt; 단위로 data를 읽어서 &lt;code&gt;output.txt&lt;/code&gt; 에 복사한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileReader;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileWriter;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileIO&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        FileReader in = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        FileWriter out = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            in = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileReader(&lt;span class=&quot;string&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            out = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileWriter(&lt;span class=&quot;string&quot;&gt;&quot;output.txt&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((c = in.read()) != -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                out.write(c);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (in != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                in.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (out != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                out.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Scanner&quot;&gt;&lt;a href=&quot;#Scanner&quot; class=&quot;headerlink&quot; title=&quot;Scanner&quot;&gt;&lt;/a&gt;Scanner&lt;/h2&gt;&lt;p&gt;위에서 본 것과 같이 입력 파일 처리 시 Byte 또는 Character 단위로 &lt;code&gt;read&lt;/code&gt; 하기 때문에 (물론 &lt;code&gt;BufferedReader&lt;/code&gt;는 Line 단위로 읽을 수 있지만) &lt;code&gt;Parsing&lt;/code&gt;이 상당히 귀찮아진다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java 5&lt;/code&gt;부터 추가된 &lt;code&gt;Scanner&lt;/code&gt;를 사용하면 귀찮은 작업을 건너뛸 수 있다. 변수 및 메소드에 대한 정의는 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;여기&lt;/a&gt;를 참조하자. 다양한 type을 지원하며, &lt;code&gt;정규표현식 (REGEX-Regular Expression-)&lt;/code&gt;도 지원한다.&lt;/p&gt;
&lt;p&gt;주의할 점은 &lt;code&gt;Scanner&lt;/code&gt; 또한 File을 다루기 때문에 &lt;code&gt;close()&lt;/code&gt;를 해줘야 한다는 것과 &lt;code&gt;character type&lt;/code&gt;과 관련된 메소드는 제공하지 않는다는 것이다.&lt;/p&gt;
&lt;p&gt;아래 코드는 &lt;code&gt;input.txt&lt;/code&gt;에서 내용을 읽어서 &lt;code&gt;parsing&lt;/code&gt; 후 콘솔로 출력한다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Scanner;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileIO&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Scanner sc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// File 대신 System.in 을 받을 수도 있다.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (sc.hasNext()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(sc.next());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sc.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;추가정보&quot;&gt;&lt;a href=&quot;#추가정보&quot; class=&quot;headerlink&quot; title=&quot;추가정보&quot;&gt;&lt;/a&gt;추가정보&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flush()&lt;/code&gt; - Buffer의 내용을 출력(흘려보내고)하고 비운다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt; - 메모리가 낭비되지 않도록 &lt;code&gt;close()&lt;/code&gt;를 호출해줘야 하고, &lt;code&gt;close()&lt;/code&gt;가 호출 될 때 자동으로 &lt;code&gt;flush()&lt;/code&gt;가 수행된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; Class - File Class가 가지는 메소드들에 대해서는 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/io/File.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;여기&lt;/a&gt;를 참조하자.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BufferedInputStream&lt;/code&gt; - &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/io/BufferedInputStream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaDoc - BufferedInputStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BufferedOutputStream&lt;/code&gt; - &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/io/BufferedOutputStream.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaDoc- BufferedOutputStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BufferedReader&lt;/code&gt; - &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaDoc - BufferedReader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;BufferedWriter&lt;/code&gt; - &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/io/BufferedWriter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaDoc - BufferedWriter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BufferedReader&lt;/code&gt;에는 &lt;code&gt;BufferedInputStream&lt;/code&gt;에는 없는 &lt;code&gt;readLine()&lt;/code&gt; 메소드가 존재하고 &lt;code&gt;BufferedWriter&lt;/code&gt;에는 &lt;code&gt;BufferedOutputStream&lt;/code&gt;에는 없는 &lt;code&gt;newLine()&lt;/code&gt; 메소드가 존재한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;아래의 글들을 교재삼아 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tutorialspoint.com/java/java_files_io.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorials Point - Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java-api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/06/29/2016-06-29-java-fileio/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Opensource License</title>
      <link>http://lazyrodi.github.io/2016/06/28/2016-06-28-etc-opensource-license/</link>
      <guid>http://lazyrodi.github.io/2016/06/28/2016-06-28-etc-opensource-license/</guid>
      <pubDate>Tue, 28 Jun 2016 09:42:50 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Software-지적재산권&quot;&gt;&lt;a href=&quot;#Software-지적재산권&quot; class=&quot;headerlink&quot; title=&quot;Software 지적재산권&quot;&gt;&lt;/a&gt;Software 지적재산권&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;저작권&lt;/li&gt;
&lt;li&gt;특허권
      
      </description>
      
      <content:encoded>&lt;h2 id=&quot;Software-지적재산권&quot;&gt;&lt;a href=&quot;#Software-지적재산권&quot; class=&quot;headerlink&quot; title=&quot;Software 지적재산권&quot;&gt;&lt;/a&gt;Software 지적재산권&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;저작권&lt;/li&gt;
&lt;li&gt;특허권&lt;/li&gt;
&lt;li&gt;상표권&lt;/li&gt;
&lt;li&gt;영업비밀&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;저작권-Copyright&quot;&gt;&lt;a href=&quot;#저작권-Copyright&quot; class=&quot;headerlink&quot; title=&quot;저작권 (Copyright)&quot;&gt;&lt;/a&gt;저작권 (Copyright)&lt;/h3&gt;&lt;p&gt;  창작물에 대해 창작자(저작자)가 취득하는 권리로 창작과 동시에 권리가 발생한다.&lt;/p&gt;
&lt;p&gt;  소프트웨어도 작성 시 저작권이 발생하며 저각권은 개인 또는 소속 회사에 부여된다.&lt;/p&gt;
&lt;p&gt;  저작권자의 허락 없이는 해당 저작물을 복제, 배포 수정할 수 없다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;특허권-Patent&quot;&gt;&lt;a href=&quot;#특허권-Patent&quot; class=&quot;headerlink&quot; title=&quot;특허권 (Patent)&quot;&gt;&lt;/a&gt;특허권 (Patent)&lt;/h3&gt;&lt;p&gt;  발명에 관하여 발명자(특허권자)가 갖는 독점배타권을 말한다.&lt;/p&gt;
&lt;p&gt;  출원을 통해 등록되어야만 권리가 발생한다.&lt;/p&gt;
&lt;p&gt;  언어와 관계 없이 방식이 동일하면 소프트웨어 특허에 걸린다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;상표권-Trademark&quot;&gt;&lt;a href=&quot;#상표권-Trademark&quot; class=&quot;headerlink&quot; title=&quot;상표권 (Trademark)&quot;&gt;&lt;/a&gt;상표권 (Trademark)&lt;/h3&gt;&lt;p&gt;  지정상품에 대해 등록상표를 사용할 독점적인 권리를 말한다. 특허와 마찬가지로 등록해야 한다.&lt;/p&gt;
&lt;p&gt;  상표를 사용하기 위해서는 반드시 상표권자의 허락을 받아야 한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;영업비밀&quot;&gt;&lt;a href=&quot;#영업비밀&quot; class=&quot;headerlink&quot; title=&quot;영업비밀&quot;&gt;&lt;/a&gt;영업비밀&lt;/h3&gt;&lt;p&gt;  비공개 소프트웨어어같은 경우가 해당한다. 영업비밀의 경우 공개되면 법적으로 보호받기 어렵다. &lt;/p&gt;
&lt;hr&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;저작권&lt;/th&gt;&lt;th&gt;특허권&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;권리발생&lt;/th&gt;&lt;td&gt;창작과 동시에 발생&lt;/td&gt;&lt;td&gt;특허출원, 심사, 등록&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;권리내용&lt;/th&gt;&lt;td&gt;인격권 (공표권, 성명표시권, 동일서유지권)&lt;/td&gt;&lt;td&gt;독점배타권 실시권&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;효력범위&lt;/th&gt;&lt;td&gt;표현(코드)의 실질적 유사성&lt;/td&gt;&lt;td&gt;아이디어 (알고리즘, 기능)의 동일성&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;hr&gt;
&lt;h2 id=&quot;Software-License&quot;&gt;&lt;a href=&quot;#Software-License&quot; class=&quot;headerlink&quot; title=&quot;Software License&quot;&gt;&lt;/a&gt;Software License&lt;/h2&gt;&lt;p&gt;  오픈소스에도 지적재산권이 있다. 일반적으로 느슨한 License를 적용하여 수정, 복제, 배포에 별 제약을 두지 않지만 몇 가지 지켜야 할 사항이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;개발자, 기여자, 저작권 정보 표시&lt;/li&gt;
&lt;li&gt;코드를 수정한 경우 수정한 정보 표시&lt;ul&gt;
&lt;li&gt;수정자,  수정일 등을 기입하여 원본과 구별한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;License 정보 제공&lt;ul&gt;
&lt;li&gt;일반인이 해당 License를 잘 이해할 수 있도록 License 정보를 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Copyleft&lt;/code&gt; (동일한 License로 재 배포)할 것&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GPL&lt;/code&gt; 등이 대표적이며, 수정한 소스를 배포할 때에도 이전과 동일한 License를 사용해야 한다.&lt;/li&gt;
&lt;li&gt;Copyleft License들은 소프트웨어 배포 시 소스코드까지 함께 배포할 것을 요구한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;BSD-Berkeley-Software-Distribution&quot;&gt;&lt;a href=&quot;#BSD-Berkeley-Software-Distribution&quot; class=&quot;headerlink&quot; title=&quot;BSD (Berkeley Software Distribution)&quot;&gt;&lt;/a&gt;BSD (Berkeley Software Distribution)&lt;/h3&gt;&lt;p&gt;  배포되는 프로젝트들이 미국 정부의 재원을 사용했기 때문에 소스코드를 공개하지 않아도 된다.&lt;/p&gt;
&lt;p&gt;  다만 배포 시 저작권 표시, 보증 책임이 없음을 표시해야 한다. 이것만 지킨다면 상용 소프트웨어에도 무제한 사용이 가능하다.&lt;/p&gt;
&lt;p&gt;아래 내용이 포함되어야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;The BSD License&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The following is a BSD license template. To generate your own license, change the values of OWNER, ORGANIZATION and YEAR from their original values as given here, and substitute your own. Also, you may optionally omit clause 3 and still be OSD conformant.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Note: On January 9th, 2008 the OSI Board approved the &lt;span class=&quot;string&quot;&gt;&quot;Simplified BSD License&quot;&lt;/span&gt; variant used by FreeBSD and others, &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; omits the final &lt;span class=&quot;string&quot;&gt;&quot;no-endorsement&quot;&lt;/span&gt; clause and is thus roughly equivalent to the MIT License.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Historical Note: The original license used on BSD Unix had four clauses. The advertising clause (the third of four clauses) required you to acknowledge use of U.C. Berkeley code &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; your advertising of any product using that code. It was officially rescinded by the Director of the Office of Technology Licensing of the University of California on July 22nd, 1999. He states that clause 3 is &lt;span class=&quot;string&quot;&gt;&quot;hereby deleted in its entirety.&quot;&lt;/span&gt; The four clause license has not been approved by OSI. The license below does not contain the advertising clause.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This prelude is not part of the license.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;= Regents of the University of California&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;= University of California, Berkeley&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;= 1998&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In the original BSD license, both occurrences of the phrase &lt;span class=&quot;string&quot;&gt;&quot;COPYRIGHT HOLDERS AND CONTRIBUTORS&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the disclaimer &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;REGENTS AND CONTRIBUTORS&quot;&lt;/span&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Here is the license template:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Copyright (c) , &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;All rights reserved.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Redistribution and use &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;·         Redistributions of &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;·         Redistributions &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the documentation and/or other materials provided with the distribution.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;·         Neither the name of the nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &lt;span class=&quot;string&quot;&gt;&quot;AS IS&quot;&lt;/span&gt; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Apache-License&quot;&gt;&lt;a href=&quot;#Apache-License&quot; class=&quot;headerlink&quot; title=&quot;Apache License&quot;&gt;&lt;/a&gt;Apache License&lt;/h3&gt;&lt;p&gt;  &lt;code&gt;아파치 재단 (ASF: Apache Software Foundation)&lt;/code&gt;의 모든 소프트웨어에 적용되는 License로 소스 공개 의무가 없다.&lt;/p&gt;
&lt;p&gt;  단, &lt;code&gt;&amp;quot;Apache&amp;quot;&lt;/code&gt; 라는 이름에 대한 상표권을 침해하면 안되고 특허권에 대한 내용이 포함되어 있다.&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;Apache 2.0&lt;/code&gt;에 특허 관련 조항이 들어가서 &lt;code&gt;GPL 2.0&lt;/code&gt;과의 결합이 어려웠는데 &lt;code&gt;GPL 3.0&lt;/code&gt;에서는 이 문제가 해결되어 &lt;code&gt;Apache&lt;/code&gt; 코드와 &lt;code&gt;GPL 3.0&lt;/code&gt; 코드의 결합이 가능해졌다.&lt;/p&gt;
&lt;p&gt;아래 내용이 포함되어야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Copyright [yyyy] [name of copyright owner]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Licensed under the Apache License, Version 2.0 (the &lt;span class=&quot;string&quot;&gt;&quot;License&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;you may not use this file except &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; compliance with the License.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;You may obtain a copy of the License at&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    http://www.apache.org/licenses/LICENSE-2.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Unless required by applicable law or agreed to &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; writing, software&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;distributed under the License is distributed on an &lt;span class=&quot;string&quot;&gt;&quot;AS IS&quot;&lt;/span&gt; BASIS,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;See the License &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the specific language governing permissions and&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;limitations under the License.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;GPL-2-0-General-Public-Lecense&quot;&gt;&lt;a href=&quot;#GPL-2-0-General-Public-Lecense&quot; class=&quot;headerlink&quot; title=&quot;GPL 2.0 (General Public Lecense)&quot;&gt;&lt;/a&gt;GPL 2.0 (General Public Lecense)&lt;/h3&gt;&lt;p&gt;  GPL 2.0이 적용된 코드를 사용할 경우 &lt;code&gt;&amp;quot;본 제품(SW)은 GPL 라이센스 하에 배포되는 SW인 ㅇㅇㅇ를 포함합니다.&amp;quot;&lt;/code&gt; 등의 문구를 매뉴얼 혹은 그에 준하는 매체에 포함시키고 GPL 전문을 첨부해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드를 수정하거나 새로운 소프트웨어를 Link(Static, Dynamic 모두) 하는 경우 소스코드 제공 의무 가짐&lt;/li&gt;
&lt;li&gt;Object code, Excutable form으로 배포하는 경우 소스코드 자체를 함께 배포하거나 제공받을 수 있는 방법을 기술&lt;/li&gt;
&lt;li&gt;자신의 특허를 구현한 코드인 경우 특허 사용료를 받을 수 없음&lt;/li&gt;
&lt;li&gt;&lt;p&gt;타인의 특허를 구현한 코드인 경우 특허권자가 사용자에게 사용료를 받지 않겠다고 한 경우에만 배포 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;예외케이스&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNU Classpath Project와 Java Platform의 경우 소스코드를 공개하지 않고 배포 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GPL 2.0은 아래 문구들이 포함되어야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;One line to give the program&lt;span class=&quot;string&quot;&gt;&#39;s name and a brief idea of what it does.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Copyright (C) &amp;lt;year&amp;gt; &amp;lt;name of author&amp;gt;  &lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;추가로 아래 문구들이 더 필요하다.&lt;/p&gt;
&lt;p&gt;파일 하나짜리 프로그램일 경우&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;This program is free software: you can redistribute it and/or modify&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;it under the terms of the GNU General Public License as published by&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;the Free Software Foundation, either version 3 of the License, or&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(at your option) any later version.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This program is distributed &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the hope that it will be useful,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GNU General Public License &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more details.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;You should have received a copy of the GNU General Public License&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;파일이 프로그램의 일부일 때&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;This file is part of XXXXX.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Foobar is free software: you can redistribute it and/or modify&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;it under the terms of the GNU General Public License as published by&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;the Free Software Foundation, either version 3 of the License, or&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(at your option) any later version.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Foobar is distributed &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the hope that it will be useful,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;GNU General Public License &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more details.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;You should have received a copy of the GNU General Public License&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;along with Foobar.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;GPL-3-0&quot;&gt;&lt;a href=&quot;#GPL-3-0&quot; class=&quot;headerlink&quot; title=&quot;GPL 3.0&quot;&gt;&lt;/a&gt;GPL 3.0&lt;/h3&gt;&lt;p&gt;  &lt;code&gt;GPL 2.0&lt;/code&gt;에 비해 변경점은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GPL 3.0&lt;/code&gt; 소스코드를 특정 제품에 포함시키거나 함께 배포하는 경우, 해당 소스에 설치 정보를 함께 제공해야 한다. 다만, ROM에 설치되는 경우(그 누구도 수정코드를 제품에 설치할 수 없는 경우)에는 설치 정보를 제공하지 않아도 된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DRM (Digital Rights Management)&lt;/code&gt;과 관련된 각국 법률에 의해 보호되는 이익을 포기해야 한다.&lt;/li&gt;
&lt;li&gt;특허와 관련하여 원 소스코드를 개선하여 배포한 기여자의 경우 자신이 기여한 부분에 대해서는 비차별적이고 특허 사용료가 없다는 내용의 License를 제공해야 한다.&lt;/li&gt;
&lt;li&gt;특허와 관련하여 Licensee 등으로부터 특허 소송이 제기되는 경우 소송을 제기한 날에 특허소송을 제기한 Licensee의 Opensource software license는 종료된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Apache 2.0&lt;/code&gt; 및 &lt;code&gt;Affero GPL&lt;/code&gt;과 양립이 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;LGPL-2-1-Lesser-General-Public-License&quot;&gt;&lt;a href=&quot;#LGPL-2-1-Lesser-General-Public-License&quot; class=&quot;headerlink&quot; title=&quot;LGPL 2.1 (Lesser General Public License)&quot;&gt;&lt;/a&gt;LGPL 2.1 (Lesser General Public License)&lt;/h3&gt;&lt;p&gt;  일부 &lt;code&gt;Library&lt;/code&gt;에 대하여 &lt;code&gt;GPL&lt;/code&gt;보다 소스코드의 공개 정도를 완화된 형태로 사용할 수 있도록 만든 License이다. 상용 소프트웨어 개발자들이 코드 공개때문에 오픈 소스를 사용하지 않을까봐 조금 완화하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 배포 시 저작권 표시, 보증책임 없음 표시, LGPL에 의해 배포된다는 사실을 명시&lt;/li&gt;
&lt;li&gt;LGPL Library의 일부를 수정하는 경우 수정한 코드 공개&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LGPL Library에 Link(Static, Dynamic)할 경우 해당 소스 공개 불필요. 단, 사용자가 Library 수정 후 동일한 실행 파일을 생성할 수 있도록 Static Linking시에는 Object code를 제공해야 함.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GPL과 동일한 저작권 표시를 해야한다. 단, GPL에서의 &amp;#39;프로그램&amp;#39; 을 &amp;#39;라이브러리&amp;#39;로 한다. 라이브러리를 수정한 것이므로...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;MIT-Massachusetts-Institute-of-Technology&quot;&gt;&lt;a href=&quot;#MIT-Massachusetts-Institute-of-Technology&quot; class=&quot;headerlink&quot; title=&quot;MIT (Massachusetts Institute of Technology)&quot;&gt;&lt;/a&gt;MIT (Massachusetts Institute of Technology)&lt;/h3&gt;&lt;p&gt;  미국 MIT에서 학생들을 돕기 위해 개발한 License로 MIT를 개조한 제품은 반드시 오픈 소스로 배포해야 한다는 규정이 없다.&lt;/p&gt;
&lt;p&gt;  아래와 같은 저작권 문구를 포함해야 한다.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Copyright (c) &amp;lt;year&amp;gt; &amp;lt;copyright holders&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &lt;span class=&quot;string&quot;&gt;&quot;Software&quot;&lt;/span&gt;), to deal &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; so, subject to the following conditions:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;이 외에도 &lt;code&gt;MPL(Mozilla Public License)&lt;/code&gt;, &lt;code&gt;CDDL(Common Development and Distribution License)&lt;/code&gt;, &lt;code&gt;CPL(Common Public License)&lt;/code&gt;, &lt;code&gt;EPL(Eclipse Public License)&lt;/code&gt; 등 무진장 많아서 더는 못쓰겠다.&lt;/p&gt;
&lt;p&gt;그때그때 찾아보자.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;아래 표는 &lt;a href=&quot;http://www.olis.or.kr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;한국저작권협회&lt;/a&gt;에서 제공하는 자료이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-06-28-etc-opensource-license-1.jpg&quot; alt=&quot;Opensource License&quot;&gt;{:class=”img-responsive”}&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;정리&quot;&gt;&lt;a href=&quot;#정리&quot; class=&quot;headerlink&quot; title=&quot;정리&quot;&gt;&lt;/a&gt;정리&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BSD (Berkeley Software Distribution)&lt;ul&gt;
&lt;li&gt;저작권 표시 필요함&lt;/li&gt;
&lt;li&gt;코드 공개 의무 없음&lt;/li&gt;
&lt;li&gt;저자 및 기여자들의 이름을 홍보용으로 사용할 수 없음&lt;/li&gt;
&lt;li&gt;상용으로 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apache&lt;ul&gt;
&lt;li&gt;저작권 표시 필요함&lt;/li&gt;
&lt;li&gt;코드 공개 의무 없음&lt;/li&gt;
&lt;li&gt;상용으로 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GPL (General Public License)&lt;ul&gt;
&lt;li&gt;저작권 표시 필요함&lt;/li&gt;
&lt;li&gt;GPL 전문 포함해야 함&lt;/li&gt;
&lt;li&gt;소스 코드 공개 필요함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LGPL (Lesser General Public License)&lt;ul&gt;
&lt;li&gt;저작권 표시 필요함&lt;/li&gt;
&lt;li&gt;LGPL Library를 수정한 경우 코드 공개해야 함&lt;/li&gt;
&lt;li&gt;LGPL Library를 사용만 한 경우 코드 공개 의무 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MIT&lt;ul&gt;
&lt;li&gt;소스 공개 의무 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Licensing&lt;/code&gt;은 &lt;code&gt;Licensor&lt;/code&gt;가 &lt;code&gt;Licensee&lt;/code&gt;에게 대가를 받고 그 재산권을 사용할 수 있도록 상업적 권리를 부여하는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;결론-상용에서는-GPL을-피하고-MIT-BSD-Apache를-사용하자&quot;&gt;&lt;a href=&quot;#결론-상용에서는-GPL을-피하고-MIT-BSD-Apache를-사용하자&quot; class=&quot;headerlink&quot; title=&quot;결론 : 상용에서는 GPL을 피하고 MIT, BSD, Apache를 사용하자.&quot;&gt;&lt;/a&gt;결론 : 상용에서는 GPL을 피하고 MIT, BSD, Apache를 사용하자.&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;아래의 글들을 교재삼아 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오픈소스 소프트웨어 라이선스 가이드 2.0 - 문화체육관광부, 한국저작권위원회&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;www.linuxfoundation.org/principlesofsoftwarecontracts&quot;&gt;Principles of Software Contracts - The LINUX Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.olis.or.kr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;한국저작권협회&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;APACHE Software Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-2.0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GPL 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GPL 3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/06/28/2016-06-28-etc-opensource-license/#disqus_thread</comments>
    </item>
    
    <item>
      <title>String-StringBuffer-StringBuilder</title>
      <link>http://lazyrodi.github.io/2016/06/27/2016-06-27-java-string-stringbuffer-stringbuilder/</link>
      <guid>http://lazyrodi.github.io/2016/06/27/2016-06-27-java-string-stringbuffer-stringbuilder/</guid>
      <pubDate>Mon, 27 Jun 2016 11:42:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;살펴보고 돌아서서 5분 후면 까먹는 String, StringBuffer, StringBuilder에 대한 정리.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;Stri
      
      </description>
      
      <content:encoded>&lt;p&gt;살펴보고 돌아서서 5분 후면 까먹는 String, StringBuffer, StringBuilder에 대한 정리.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h2&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;은 &lt;code&gt;Immutable Class (불변 클래스)&lt;/code&gt;이다. 불변 클래스라 함은 아래 코드와 같이 str1에 str2를 더했을 때 원래의 객체가 변하는 것이 아니라 새로운 객체가 생성되는 것을 의미한다.&lt;/p&gt;
&lt;p&gt;코드 1.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String str1 = &lt;span class=&quot;string&quot;&gt;&quot;Lazy&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String str2 = &lt;span class=&quot;string&quot;&gt;&quot;Rodi&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;         str1 =&amp;gt;          &quot;&lt;/span&gt; + str1 + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + str1.hashCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;         str2 =&amp;gt;     &quot;&lt;/span&gt; + str2 + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + str2.hashCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;str1 += str2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;str1 += str2; =&amp;gt; &quot;&lt;/span&gt; + str1 + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + str1.hashCode());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;결과값 1. 주소가 바뀐 것을 확인할 수 있다.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;         str1 =&amp;gt;          Lazy: 2361236&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         str2 =&amp;gt;     Rodriguez: 2552738&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;str1 += str2; =&amp;gt; LazyRodriguez: -1189801674&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;위의 예제에서 처음 &lt;code&gt;str1&lt;/code&gt;이 차지하고 있던 공간이 낭비된다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이 낭비를 막기 위해 &lt;code&gt;StringBuffer&lt;/code&gt;를 살펴보자.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;StringBuffer&quot;&gt;&lt;a href=&quot;#StringBuffer&quot; class=&quot;headerlink&quot; title=&quot;StringBuffer&quot;&gt;&lt;/a&gt;StringBuffer&lt;/h2&gt;&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt;는 &lt;code&gt;Immutable Class&lt;/code&gt;가 아니며, &lt;code&gt;append()&lt;/code&gt; 메소드를 제공하여 문자열 연산을 할 수 있게 도와준다.&lt;/p&gt;
&lt;p&gt;코드 2.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;StringBuffer strBuf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String str1 = &lt;span class=&quot;string&quot;&gt;&quot;Lazy&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String str2 = &lt;span class=&quot;string&quot;&gt;&quot;Rodriguez&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;strBuf =&amp;gt; &quot;&lt;/span&gt; + strBuf + &lt;span class=&quot;string&quot;&gt;&quot;             : &quot;&lt;/span&gt; + strBuf.hashCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strBuf.append(str1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;strBuf =&amp;gt;          &quot;&lt;/span&gt; + strBuf + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + strBuf.hashCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strBuf.append(str2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;strBuf =&amp;gt; &quot;&lt;/span&gt; + strBuf + &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt; + strBuf.hashCode());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;결과값 2. 새로 생성되는 객체가 없다.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;strBuf =&amp;gt;              : 366712642&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strBuf =&amp;gt;          Lazy: 366712642&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strBuf =&amp;gt; LazyRodriguez: 366712642&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;별 차이 없는 것으로 볼 수도 있고, &lt;code&gt;StringBuffer&lt;/code&gt;를 생성할 때의 자원이 걱정될 수도 있겠지만, 문자의 &lt;code&gt;+&lt;/code&gt; 연산이 빈번하게 이루어진다면 메모리의 낭비가 커질 수 밖에 없고 이 때 &lt;code&gt;StringBuffer&lt;/code&gt;를 &lt;code&gt;String&lt;/code&gt;보다 효율적으로 사용할 수 있게 된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt;과 &lt;code&gt;StringBuffer&lt;/code&gt; 모두 &lt;code&gt;char[]&lt;/code&gt; 이다. &lt;code&gt;String&lt;/code&gt;은 &lt;code&gt;+&lt;/code&gt; 연산 시 새로운 배열을 만들어내고 &lt;code&gt;StringBuffer&lt;/code&gt;은 미리 배열을 여유있게 잡아둔다.&lt;/p&gt;
&lt;p&gt;이런 이유때문에 &lt;code&gt;StringBuffer&lt;/code&gt;의 배열이 꽉 차서 메모리를 더 잡아주는 지점에서 성능 저하가 살짝 나타난다.&lt;/p&gt;
&lt;p&gt;보통 &lt;code&gt;StringBuffer&lt;/code&gt;가 &lt;code&gt;String&lt;/code&gt; 보다 성능이 뛰어나다. &lt;code&gt;String&lt;/code&gt;의 경우에도 Compiler가 &lt;code&gt;+&lt;/code&gt; 연산을 &lt;code&gt;StringBuffer&lt;/code&gt;로 자동 변환해주긴 하지만 모든 &lt;code&gt;+&lt;/code&gt; 연산을 커버하지는 않는다고 한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;StringBuilder&quot;&gt;&lt;a href=&quot;#StringBuilder&quot; class=&quot;headerlink&quot; title=&quot;StringBuilder&quot;&gt;&lt;/a&gt;StringBuilder&lt;/h2&gt;&lt;p&gt;위에서 살펴본 &lt;code&gt;StringBuffer&lt;/code&gt;는 멀티 스레딩 환경에서 Thread-safe를 위해 &lt;code&gt;동기화(Synchronized)&lt;/code&gt;가 이루어진다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;StringBuilder&lt;/code&gt;는 &lt;code&gt;StringBuffer&lt;/code&gt;에서 동기화 기능을 제거한 것이다. 고로, 멀티 스레딩 환경이 아니라면 &lt;code&gt;StrigBuilder&lt;/code&gt;를 쓰는 것이 낫다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;성능시험&quot;&gt;&lt;a href=&quot;#성능시험&quot; class=&quot;headerlink&quot; title=&quot;성능시험&quot;&gt;&lt;/a&gt;성능시험&lt;/h2&gt;&lt;p&gt;간단한 코드로 속도를 비교해 보도록 하자. loop 단위가 작을 때에는 &lt;code&gt;currentTimeMillis()&lt;/code&gt; 대신 &lt;code&gt;nanoTime()&lt;/code&gt;을 사용하면 된다.&lt;/p&gt;
&lt;p&gt;(사실 아래 코드가 측정에 적당한 코드인지 불안하긴 하다…)&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String str1 = &lt;span class=&quot;string&quot;&gt;&quot;Lazy&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String str2 = &lt;span class=&quot;string&quot;&gt;&quot;Rodriguez&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;StringBuffer strBuffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;StringBuilder strBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; max = &lt;span class=&quot;number&quot;&gt;50000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; s, e;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s = System.currentTimeMillis();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;StringBuffer&#39; start = &quot;&lt;/span&gt; + s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; max; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    strBuffer.append(str2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e = System.currentTimeMillis();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;StringBuffer&#39; start = &quot;&lt;/span&gt; + e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;StringBuffer&#39; spend time = &quot;&lt;/span&gt; + (e - s));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s = System.currentTimeMillis();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;StringBuilder&#39; start = &quot;&lt;/span&gt; + s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; max; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    strBuilder.append(str2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e = System.currentTimeMillis();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;StringBuilder&#39; start = &quot;&lt;/span&gt; + e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;StringBuilder&#39; spend time = &quot;&lt;/span&gt; + (e - s));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s = System.currentTimeMillis();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;+&#39; start = &quot;&lt;/span&gt; + s);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; max; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    str1 += str2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;e = System.currentTimeMillis();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;+&#39; start = &quot;&lt;/span&gt; + e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;&#39;+&#39; spend time = &quot;&lt;/span&gt; + (e - s));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;아래 결과는 3회 측정 후 평균 낸 값이다.&lt;/p&gt;
&lt;p&gt;기초적인 환경에서는 &lt;code&gt;StringBuilder&lt;/code&gt; 성능이 제일 좋다는 것을 알 수 있다.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;종류 \ 수행&lt;/th&gt;&lt;th&gt;100회 (ns)&lt;/th&gt;&lt;th&gt;1000회 (ns)&lt;/th&gt;&lt;th&gt;10000회 (ms)&lt;/th&gt;&lt;th&gt;20000회 (ms)&lt;/th&gt;&lt;th&gt;30000회 (ms)&lt;/th&gt;&lt;th&gt;50000회 (ms)&lt;/th&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;274526&lt;/td&gt;&lt;td&gt;9077829&lt;/td&gt;&lt;td&gt;539&lt;/td&gt;&lt;td&gt;1910&lt;/td&gt;&lt;td&gt;4208.667&lt;/td&gt;&lt;td&gt;10992.67&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;StringBuffer&lt;/td&gt;&lt;td&gt;305514.7&lt;/td&gt;&lt;td&gt;583808.3&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3.666667&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;6.333333&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;StringBuilder&lt;/td&gt;&lt;td&gt;117393.7&lt;/td&gt;&lt;td&gt;202339.7&lt;/td&gt;&lt;td&gt;2.333333&lt;/td&gt;&lt;td&gt;2.333333&lt;/td&gt;&lt;td&gt;3.333333&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;hr&gt;
&lt;h2 id=&quot;내-맘대로-정리&quot;&gt;&lt;a href=&quot;#내-맘대로-정리&quot; class=&quot;headerlink&quot; title=&quot;내 맘대로 정리&quot;&gt;&lt;/a&gt;내 맘대로 정리&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String&lt;ul&gt;
&lt;li&gt;단순한 코드, 문자열의 불변성이 유지되는 코드에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StringBuffer&lt;ul&gt;
&lt;li&gt;Thread-safe 환경에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StringBuilder&lt;ul&gt;
&lt;li&gt;Single thread 환경에서 문자열 결합에서는 가장 좋은 성능을 보임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;출처&quot;&gt;&lt;a href=&quot;#출처&quot; class=&quot;headerlink&quot; title=&quot;출처&quot;&gt;&lt;/a&gt;출처&lt;/h2&gt;&lt;p&gt;아래의 글들을 교재삼아 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cafe.naver.com/javachobostudy/2423&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cafe.naver.com/javachobostudy/2423&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cafe.naver.com/javachobostudy/36860&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cafe.naver.com/javachobostudy/36860&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cafe.naver.com/hitommy/543&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cafe.naver.com/hitommy/543&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/String.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StringBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;[StringBuffer&quot;&gt;StringBuffer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/06/27/2016-06-27-java-string-stringbuffer-stringbuilder/#disqus_thread</comments>
    </item>
    
    <item>
      <title>작심일일 프로젝트</title>
      <link>http://lazyrodi.github.io/2016/06/27/2016-06-27-life-jaksimilill/</link>
      <guid>http://lazyrodi.github.io/2016/06/27/2016-06-27-life-jaksimilill/</guid>
      <pubDate>Mon, 27 Jun 2016 10:47:50 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;作心一日&quot;&gt;&lt;a href=&quot;#作心一日&quot; class=&quot;headerlink&quot; title=&quot;作心一日&quot;&gt;&lt;/a&gt;作心一日&lt;/h2&gt;&lt;p&gt;뭐든 꾸준히 못 하는 성격인데 인생의 위기가 왔으니 꾸준히 공부를 해보려 한다. 목표는 하루에 글타래 하나 정리
      
      </description>
      
      <content:encoded>&lt;h2 id=&quot;作心一日&quot;&gt;&lt;a href=&quot;#作心一日&quot; class=&quot;headerlink&quot; title=&quot;作心一日&quot;&gt;&lt;/a&gt;作心一日&lt;/h2&gt;&lt;p&gt;뭐든 꾸준히 못 하는 성격인데 인생의 위기가 왔으니 꾸준히 공부를 해보려 한다. 목표는 하루에 글타래 하나 정리하기.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(2016-06-27) &lt;a href=&quot;/jekyll/update/2016/06/27/java-string-stringbuffer-stringbuilder.html&quot;&gt;String-StringBuffer-StringBuilder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-06-28) &lt;a href=&quot;/jekyll/update/2016/06/28/etc-opensource-license.html&quot;&gt;Opensource License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-06-29) &lt;a href=&quot;/jekyll/update/2016/06/29/java-fileio.html&quot;&gt;FileIO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-06-30) &lt;a href=&quot;/jekyll/update/2016/06/30/db-fundamental-of-database.html&quot;&gt;Fundamental of Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-07-01) &lt;a href=&quot;/jekyll/update/2016/07/01/common-memory-management.html&quot;&gt;Memory Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-07-02) &lt;a href=&quot;/jekyll/update/2016/07/02/etc-regular-expression.html&quot;&gt;Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-07-03) &lt;a href=&quot;/jekyll/update/2016/07/03/java-queue.html&quot;&gt;Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-07-04) &lt;a href=&quot;/jekyll/update/2016/07/04/osi7-and-tcpip.html&quot;&gt;OSI 7 layer and TCP/IP model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2016-07-05~2016-07-10) &lt;a href=&quot;/jekyll/update/2016/07/11/android-permission.html&quot;&gt;Android Permission&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/06/27/2016-06-27-life-jaksimilill/#disqus_thread</comments>
    </item>
    
    <item>
      <title>동영상 모음</title>
      <link>http://lazyrodi.github.io/2016/06/22/2016-06-22-docthread-video-collecting/</link>
      <guid>http://lazyrodi.github.io/2016/06/22/2016-06-22-docthread-video-collecting/</guid>
      <pubDate>Wed, 22 Jun 2016 11:01:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=i0pkKABS-YY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;개발자가 보면 암걸리는 동영상&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https:/
      
      </description>
      
      <content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=i0pkKABS-YY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;개발자가 보면 암걸리는 동영상&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/VypDiN-X5FA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;산으로 가는 광고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=O7YzjUNL-Z4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;오늘 미래를 만나다 - 허태균 교수&lt;/a&gt; : 대한민국에서 행복 찾기&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OL2iHMBRd7g&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;자기 적성을 몰라 헤매는 당신이 반드시 들어야 할 대답&lt;/a&gt; : 송길영 다음소프트 부사장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=cNN_tTXABUA&amp;amp;feature=youtu.be&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How a CPU Works&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/06/22/2016-06-22-docthread-video-collecting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[조직문화] 회의</title>
      <link>http://lazyrodi.github.io/2016/06/22/2016-06-22-hr-conference/</link>
      <guid>http://lazyrodi.github.io/2016/06/22/2016-06-22-hr-conference/</guid>
      <pubDate>Wed, 22 Jun 2016 11:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;http://www.andrewahn.co/silicon-valley/silicon-valley-meeting-tips/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;실리콘밸리 임원들이 회의 하는 법&lt;/a&gt; - www
      
      </description>
      
      <content:encoded>&lt;p&gt;&lt;a href=&quot;http://www.andrewahn.co/silicon-valley/silicon-valley-meeting-tips/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;실리콘밸리 임원들이 회의 하는 법&lt;/a&gt; - www.andrewahn.co&lt;br&gt;&lt;a href=&quot;http://www.andrewahn.co/silicon-valley/5-day-rule-and-clean-escalation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;신속한 합의를 위한 5일의 법칙&lt;/a&gt; - www.andrewahn.co&lt;/p&gt;
</content:encoded>
      
      <comments>http://lazyrodi.github.io/2016/06/22/2016-06-22-hr-conference/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
